{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# BridgeGAD - Bridge Technical Drawing Generator\n\n## Overview\n\nBridgeGAD is a specialized engineering application that generates technical AutoCAD DWG files and PDFs from bridge design parameters. The system processes LISP-formatted input data containing bridge engineering parameters, performs complex geometric calculations, and produces professional technical drawings with proper scaling, dimensions, and annotations. Built as a modern full-stack web application, it bridges traditional civil engineering workflows with contemporary web technologies.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React with TypeScript**: Component-based UI using modern hooks and functional components for type-safe development\n- **Vite Build System**: Fast development server with hot module replacement and optimized production builds\n- **shadcn/ui Design System**: Consistent component library built on Radix UI primitives with Tailwind CSS styling\n- **TanStack Query**: Robust server state management with caching, background updates, and optimistic updates\n- **Wouter Router**: Lightweight client-side routing without React Router overhead\n- **Custom Canvas Engine**: Specialized drawing system for technical engineering diagrams with coordinate transformations\n\n### Backend Architecture\n- **Express.js REST API**: Node.js server handling file processing, mathematical calculations, and drawing generation\n- **TypeScript**: Full type safety across backend services for reliability in engineering calculations\n- **Modular Route Structure**: Clean separation between bridge processing, file handling, and user management\n- **In-Memory Storage**: Development-ready storage with interface designed for PostgreSQL migration\n- **LISP Parser**: Custom parser for traditional engineering input formats used in civil engineering\n\n### Data Processing Pipeline\n- **Engineering Parameter Validation**: Zod schema validation ensuring input parameters meet engineering constraints\n- **Bridge Calculator**: Mathematical engine implementing coordinate transformations, skew angle adjustments, and layout calculations\n- **Drawing Generator**: SVG-based technical drawing creation with proper scaling, grid systems, and dimension annotations\n- **Multi-Format Export**: Support for DWG (AutoCAD), PDF, and SVG output formats with customizable paper sizes and scales\n\n### Database Design\n- **Drizzle ORM**: Type-safe database operations with schema migration support\n- **PostgreSQL with Neon**: Serverless database for scalable project storage\n- **Project Management**: User projects, bridge parameters, cross-sections, and generated drawings\n- **Batch Processing**: Support for processing multiple bridge files simultaneously with progress tracking\n\n### Engineering Calculation Engine\n- **Coordinate System Transformations**: Mathematical conversion between engineering coordinates and drawing coordinates\n- **Skew Angle Processing**: Geometric adjustments for skewed bridge alignments\n- **Scale Factor Management**: Dual scaling system for different drawing views (plan, elevation, sections)\n- **Cross-Section Generation**: Automated creation of bridge cross-sections from chainage and level data\n\n### File Processing Workflow\n1. **Input Validation**: LISP format parsing with error handling for malformed data\n2. **Parameter Extraction**: Structured data conversion from legacy formats\n3. **Engineering Calculations**: Coordinate transformations and geometric processing\n4. **Drawing Generation**: Technical drawing creation with proper annotations\n5. **Export Processing**: Multi-format output with user-configurable settings\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless**: Neon PostgreSQL serverless database driver for scalable data storage\n- **drizzle-orm**: Type-safe ORM for database operations with migration support\n- **@tanstack/react-query**: Server state management with advanced caching and synchronization\n- **@radix-ui/react-***: Comprehensive UI component primitives for accessibility and consistency\n- **express**: Node.js web framework for REST API development\n\n### Engineering and File Processing\n- **ezdxf** (Python service): AutoCAD DWG file generation for professional CAD output\n- **FastAPI** (Python service): High-performance API for DWG export functionality with automatic documentation\n- **multer**: File upload handling for input data processing\n- **zod**: Runtime type validation for engineering parameter validation\n\n### Development and Build Tools\n- **vite**: Modern build system with fast development server and optimized production builds\n- **typescript**: Type safety across frontend and backend for reliable engineering calculations\n- **tailwindcss**: Utility-first CSS framework for consistent design system\n- **tsx**: TypeScript execution for development workflow\n- **esbuild**: Fast JavaScript bundler for production builds\n\n### UI and Interaction\n- **wouter**: Lightweight routing for single-page application navigation\n- **class-variance-authority**: Type-safe variant management for component styling\n- **date-fns**: Date manipulation library for project timestamps and file metadata\n- **lucide-react**: Icon library for consistent visual elements","size_bytes":5295},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/App_1755611196408.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport BridgeGenerator from \"@/pages/bridge-generator\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={BridgeGenerator} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":733},"attached_assets/README_1755609993515.md":{"content":"# BridgeGAD DWG Export Service\r\n\r\nThis service handles the generation of AutoCAD DWG files from bridge design data.\r\n\r\n## Prerequisites\r\n\r\n- Python 3.8 or higher\r\n- pip (Python package manager)\r\n\r\n## Setup\r\n\r\n1. Create a virtual environment (recommended):\r\n   ```bash\r\n   python -m venv venv\r\n   source venv/bin/activate  # On Windows: venv\\Scripts\\activate\r\n   ```\r\n\r\n2. Install the required packages:\r\n   ```bash\r\n   pip install -r requirements.txt\r\n   ```\r\n\r\n## Running the Service\r\n\r\n1. Start the FastAPI server:\r\n   ```bash\r\n   uvicorn main:app --reload\r\n   ```\r\n\r\n2. The service will be available at: http://localhost:8000\r\n\r\n3. API Documentation (Swagger UI): http://localhost:8000/docs\r\n\r\n## API Endpoints\r\n\r\n- `POST /api/export/dwg` - Generate a DWG file from bridge data\r\n\r\n## Development\r\n\r\n### Testing\r\n\r\nYou can test the API using curl:\r\n\r\n```bash\r\ncurl -X POST http://localhost:8000/api/export/dwg \\\r\n  -H \"Content-Type: application/json\" \\\r\n  -d '{\"parameters\": {\"scale1\": 100, \"datum\": 100.0, ...}, \"crossSections\": [...]}' \\\r\n  --output output.dwg\r\n```\r\n\r\n### Debugging\r\n\r\n- Check the console output for error messages\r\n- The service runs in debug mode with hot-reload enabled\r\n- Detailed error messages are returned in the API response\r\n\r\n## Deployment\r\n\r\nFor production deployment, consider using:\r\n- Gunicorn with Uvicorn workers\r\n- Nginx as a reverse proxy\r\n- Process manager like PM2 or Supervisor\r\n","size_bytes":1421},"attached_assets/README_1755611123750.md":{"content":"# BridgeGAD DWG Export Service\r\n\r\nThis service handles the generation of AutoCAD DWG files from bridge design data.\r\n\r\n## Prerequisites\r\n\r\n- Python 3.8 or higher\r\n- pip (Python package manager)\r\n\r\n## Setup\r\n\r\n1. Create a virtual environment (recommended):\r\n   ```bash\r\n   python -m venv venv\r\n   source venv/bin/activate  # On Windows: venv\\Scripts\\activate\r\n   ```\r\n\r\n2. Install the required packages:\r\n   ```bash\r\n   pip install -r requirements.txt\r\n   ```\r\n\r\n## Running the Service\r\n\r\n1. Start the FastAPI server:\r\n   ```bash\r\n   uvicorn main:app --reload\r\n   ```\r\n\r\n2. The service will be available at: http://localhost:8000\r\n\r\n3. API Documentation (Swagger UI): http://localhost:8000/docs\r\n\r\n## API Endpoints\r\n\r\n- `POST /api/export/dwg` - Generate a DWG file from bridge data\r\n\r\n## Development\r\n\r\n### Testing\r\n\r\nYou can test the API using curl:\r\n\r\n```bash\r\ncurl -X POST http://localhost:8000/api/export/dwg \\\r\n  -H \"Content-Type: application/json\" \\\r\n  -d '{\"parameters\": {\"scale1\": 100, \"datum\": 100.0, ...}, \"crossSections\": [...]}' \\\r\n  --output output.dwg\r\n```\r\n\r\n### Debugging\r\n\r\n- Check the console output for error messages\r\n- The service runs in debug mode with hot-reload enabled\r\n- Detailed error messages are returned in the API response\r\n\r\n## Deployment\r\n\r\nFor production deployment, consider using:\r\n- Gunicorn with Uvicorn workers\r\n- Nginx as a reverse proxy\r\n- Process manager like PM2 or Supervisor\r\n","size_bytes":1421},"attached_assets/bridge-calculations_1755611318410.ts":{"content":"// Bridge calculation functions based on the original LISP code\nexport interface BridgeParameters {\n  scale1: number;\n  scale2: number;\n  skew: number;\n  datum: number;\n  toprl: number;\n  left: number;\n  right: number;\n  xincr: number;\n  yincr: number;\n  noch: number;\n}\n\nexport interface CalculatedConstants {\n  vvs: number;  // Vertical scale factor\n  hhs: number;  // Horizontal scale factor\n  skew1: number; // Skew angle in radians\n  s: number;    // Sin of skew angle\n  c: number;    // Cos of skew angle\n  tn: number;   // Tan of skew angle\n  sc: number;   // Scale ratio\n}\n\nexport interface Point2D {\n  x: number;\n  y: number;\n}\n\nexport class BridgeCalculator {\n  private params: BridgeParameters;\n  private constants: CalculatedConstants;\n\n  constructor(parameters: BridgeParameters) {\n    this.params = parameters;\n    this.constants = this.calculateConstants();\n  }\n\n  // Calculate transformation constants (from original reed() function)\n  private calculateConstants(): CalculatedConstants {\n    const vvs = 1000.0; // Convert meters to millimeters\n    const hhs = 1000.0;\n    const skew1 = this.params.skew * 0.0174532; // Convert degrees to radians\n    const s = Math.sin(skew1);\n    const c = Math.cos(skew1);\n    const tn = s / c;\n    const sc = this.params.scale1 / this.params.scale2;\n\n    return { vvs, hhs, skew1, s, c, tn, sc };\n  }\n\n  // Vertical position transformation (from original vpos function)\n  vpos(a: number): number {\n    // Scale down for display (convert meters to drawing units)\n    let result = (a - this.params.datum) * 5; // 5 units per meter for display\n    return result;\n  }\n\n  // Horizontal position transformation (from original hpos function)\n  hpos(a: number): number {\n    // Scale down for display (convert meters to drawing units)\n    let result = (a - this.params.left) * 2; // 2 units per meter for display\n    return result;\n  }\n\n  // Vertical position with scale factor (from original v2pos function)\n  v2pos(a: number): number {\n    let result = this.constants.vvs * (a - this.params.datum);\n    result = this.constants.sc * result;\n    return this.params.datum + result;\n  }\n\n  // Horizontal position with scale factor (from original h2pos function)\n  h2pos(a: number): number {\n    let result = this.constants.hhs * (a - this.params.left);\n    result = this.constants.sc * result;\n    return this.params.left + result;\n  }\n\n  // Generate layout points (based on original layout() function)\n  generateLayoutPoints(): {\n    axes: { xAxis: Point2D[]; yAxis: Point2D[]; };\n    grid: { xMarks: Array<{ position: Point2D; label: string }>; yMarks: Array<{ position: Point2D; label: string }>; };\n    labels: Array<{ position: Point2D; text: string; angle: number }>;\n  } {\n    // Convert left to integer as in original LISP\n    const left = this.params.left - (this.params.left % 1.0);\n    const d1 = 20; // Distance between parallel lines in mm\n\n    // Main axis points\n    const pta1: Point2D = { x: 0, y: 0 }; // Start at origin\n    const pta2: Point2D = { x: this.hpos(this.params.right), y: 0 };\n    const ptd1: Point2D = { x: 0, y: this.vpos(this.params.toprl) };\n\n    // X-axis and Y-axis lines\n    const xAxis = [pta1, pta2];\n    const yAxis = [{ x: 0, y: -(d1 * 2) }, ptd1];\n\n    // Generate X-axis marks (chainages)\n    const xMarks: Array<{ position: Point2D; label: string }> = [];\n    const noh = this.params.right - this.params.left;\n    const xSteps = Math.floor(noh / this.params.xincr);\n    \n    for (let i = 1; i <= xSteps; i++) {\n      const ch = this.params.left + (i * this.params.xincr);\n      const position: Point2D = { x: this.hpos(ch), y: 0 };\n      const label = this.formatChainage(ch);\n      xMarks.push({ position, label });\n    }\n\n    // Generate Y-axis marks (levels)\n    const yMarks: Array<{ position: Point2D; label: string }> = [];\n    const nov = this.params.toprl - this.params.datum;\n    const ySteps = Math.floor(nov / this.params.yincr);\n    \n    for (let i = 0; i <= ySteps; i++) {\n      const level = this.params.datum + (i * this.params.yincr);\n      const position: Point2D = { x: 0, y: this.vpos(level) };\n      const label = level.toFixed(3);\n      yMarks.push({ position, label });\n    }\n\n    // Labels\n    const labels = [\n      {\n        position: { x: -50, y: -10 },\n        text: \"BED LEVEL\",\n        angle: 0\n      },\n      {\n        position: { x: -50, y: -30 },\n        text: \"CHAINAGE\",\n        angle: 0\n      }\n    ];\n\n    return { axes: { xAxis, yAxis }, grid: { xMarks, yMarks }, labels };\n  }\n\n  // Format chainage for display (e.g., 0+015)\n  private formatChainage(chainage: number): string {\n    const km = Math.floor(chainage / 1000);\n    const m = chainage % 1000;\n    return `${km}+${m.toFixed(0).padStart(3, '0')}`;\n  }\n\n  // Generate bridge elevation points (main GAD drawing based on LISP pier() function)\n  generateBridgeElevation(): {\n    deck: Point2D[];\n    piers: Array<{ points: Point2D[]; width: number; height: number; chainage: number }>;\n    abutments: Array<{ points: Point2D[]; width: number; height: number }>;\n    foundations: Array<{ points: Point2D[]; width: number; depth: number }>;\n    superstructure: Point2D[];\n    dimensions: Array<{ start: Point2D; end: Point2D; value: string; level: number }>;\n  } {\n    const bridgeLength = this.params.right - this.params.left;\n    const deckLevel = this.params.toprl - 1.5; // Deck level 1.5m below top RL\n    const foundationLevel = this.params.datum - 3.0; // Foundation 3m below datum\n    const bearingLevel = deckLevel - 0.5; // Bearing level\n\n    // Bridge deck (main structural element)\n    const deckThickness = 0.8; // 800mm deck thickness\n    const deck: Point2D[] = [\n      { x: this.hpos(this.params.left), y: this.vpos(deckLevel) },\n      { x: this.hpos(this.params.right), y: this.vpos(deckLevel) },\n      { x: this.hpos(this.params.right), y: this.vpos(deckLevel - deckThickness) },\n      { x: this.hpos(this.params.left), y: this.vpos(deckLevel - deckThickness) }\n    ];\n\n    // Superstructure (parapet and railing)\n    const parapetHeight = 1.2; // 1.2m parapet\n    const superstructure: Point2D[] = [\n      { x: this.hpos(this.params.left), y: this.vpos(deckLevel + parapetHeight) },\n      { x: this.hpos(this.params.right), y: this.vpos(deckLevel + parapetHeight) }\n    ];\n\n    // Generate piers based on bridge span (realistic pier spacing)\n    const piers: Array<{ points: Point2D[]; width: number; height: number; chainage: number }> = [];\n    const spanLength = 30; // 30m typical span\n    const pierCount = Math.max(0, Math.floor(bridgeLength / spanLength) - 1);\n    const pierWidth = 1.8; // 1.8m pier width\n    \n    if (pierCount > 0) {\n      const actualSpacing = bridgeLength / (pierCount + 1);\n      \n      for (let i = 1; i <= pierCount; i++) {\n        const pierChainage = this.params.left + (actualSpacing * i);\n        const pierHeight = bearingLevel - foundationLevel;\n        const halfWidth = pierWidth / 2;\n        \n        piers.push({\n          points: [\n            { x: this.hpos(pierChainage - halfWidth), y: this.vpos(foundationLevel) },\n            { x: this.hpos(pierChainage + halfWidth), y: this.vpos(foundationLevel) },\n            { x: this.hpos(pierChainage + halfWidth), y: this.vpos(bearingLevel) },\n            { x: this.hpos(pierChainage - halfWidth), y: this.vpos(bearingLevel) }\n          ],\n          width: pierWidth,\n          height: pierHeight,\n          chainage: pierChainage\n        });\n      }\n    }\n\n    // Abutments (end supports)\n    const abutmentWidth = 2.5; // 2.5m abutment width\n    const abutmentHeight = bearingLevel - this.params.datum;\n    \n    const abutments: Array<{ points: Point2D[]; width: number; height: number }> = [\n      {\n        points: [\n          { x: this.hpos(this.params.left - abutmentWidth), y: this.vpos(this.params.datum) },\n          { x: this.hpos(this.params.left), y: this.vpos(this.params.datum) },\n          { x: this.hpos(this.params.left), y: this.vpos(bearingLevel) },\n          { x: this.hpos(this.params.left - abutmentWidth), y: this.vpos(bearingLevel) }\n        ],\n        width: abutmentWidth,\n        height: abutmentHeight\n      },\n      {\n        points: [\n          { x: this.hpos(this.params.right), y: this.vpos(this.params.datum) },\n          { x: this.hpos(this.params.right + abutmentWidth), y: this.vpos(this.params.datum) },\n          { x: this.hpos(this.params.right + abutmentWidth), y: this.vpos(bearingLevel) },\n          { x: this.hpos(this.params.right), y: this.vpos(bearingLevel) }\n        ],\n        width: abutmentWidth,\n        height: abutmentHeight\n      }\n    ];\n\n    // Foundations for piers\n    const foundations: Array<{ points: Point2D[]; width: number; depth: number }> = [];\n    const foundationWidth = pierWidth + 1.0; // Foundation wider than pier\n    const foundationDepth = 2.0; // 2m foundation depth\n    \n    for (const pier of piers) {\n      const pierCenterX = (pier.points[0].x + pier.points[1].x) / 2;\n      const halfFoundationWidth = foundationWidth / 2;\n      \n      foundations.push({\n        points: [\n          { x: pierCenterX - this.hpos(halfFoundationWidth), y: this.vpos(foundationLevel) },\n          { x: pierCenterX + this.hpos(halfFoundationWidth), y: this.vpos(foundationLevel) },\n          { x: pierCenterX + this.hpos(halfFoundationWidth), y: this.vpos(foundationLevel - foundationDepth) },\n          { x: pierCenterX - this.hpos(halfFoundationWidth), y: this.vpos(foundationLevel - foundationDepth) }\n        ],\n        width: foundationWidth,\n        depth: foundationDepth\n      });\n    }\n\n    // Comprehensive dimensions (as per LISP drawing standards)\n    const dimensions = [\n      // Overall bridge length\n      {\n        start: { x: this.hpos(this.params.left), y: this.vpos(deckLevel) + 40 },\n        end: { x: this.hpos(this.params.right), y: this.vpos(deckLevel) + 40 },\n        value: `L = ${bridgeLength.toFixed(0)}m`,\n        level: 1\n      },\n      // Deck level dimension\n      {\n        start: { x: this.hpos(this.params.left) - 30, y: this.vpos(this.params.datum) },\n        end: { x: this.hpos(this.params.left) - 30, y: this.vpos(deckLevel) },\n        value: `${(deckLevel - this.params.datum).toFixed(2)}m`,\n        level: 2\n      },\n      // Bridge height\n      {\n        start: { x: this.hpos(this.params.left) - 60, y: this.vpos(foundationLevel) },\n        end: { x: this.hpos(this.params.left) - 60, y: this.vpos(deckLevel + parapetHeight) },\n        value: `H = ${(deckLevel + parapetHeight - foundationLevel).toFixed(1)}m`,\n        level: 3\n      }\n    ];\n\n    // Add span dimensions if piers exist\n    if (piers.length > 0) {\n      let prevChainage = this.params.left;\n      \n      for (let i = 0; i <= piers.length; i++) {\n        const currentChainage = i < piers.length ? piers[i].chainage : this.params.right;\n        const spanLength = currentChainage - prevChainage;\n        \n        dimensions.push({\n          start: { x: this.hpos(prevChainage), y: this.vpos(deckLevel) + 20 },\n          end: { x: this.hpos(currentChainage), y: this.vpos(deckLevel) + 20 },\n          value: `${spanLength.toFixed(0)}m`,\n          level: 0\n        });\n        \n        prevChainage = currentChainage;\n      }\n    }\n\n    return { deck, piers, abutments, foundations, superstructure, dimensions };\n  }\n\n  // Generate bridge plan view (top view)\n  generateBridgePlan(): {\n    deckOutline: Point2D[];\n    piersInPlan: Array<{ points: Point2D[]; chainage: number }>;\n    abutmentsInPlan: Array<{ points: Point2D[] }>;\n    centerline: Point2D[];\n    roadwayMarking: Point2D[];\n    dimensions: Array<{ start: Point2D; end: Point2D; value: string }>;\n  } {\n    const bridgeWidth = 12.0; // 12m bridge width\n    const roadwayWidth = 7.5; // 7.5m roadway width\n    const halfWidth = bridgeWidth / 2;\n    const halfRoadway = roadwayWidth / 2;\n\n    // Bridge deck outline in plan\n    const deckOutline: Point2D[] = [\n      { x: this.hpos(this.params.left), y: this.vpos(this.params.datum + halfWidth) },\n      { x: this.hpos(this.params.right), y: this.vpos(this.params.datum + halfWidth) },\n      { x: this.hpos(this.params.right), y: this.vpos(this.params.datum - halfWidth) },\n      { x: this.hpos(this.params.left), y: this.vpos(this.params.datum - halfWidth) }\n    ];\n\n    // Centerline\n    const centerline: Point2D[] = [\n      { x: this.hpos(this.params.left), y: this.vpos(this.params.datum) },\n      { x: this.hpos(this.params.right), y: this.vpos(this.params.datum) }\n    ];\n\n    // Roadway marking\n    const roadwayMarking: Point2D[] = [\n      { x: this.hpos(this.params.left), y: this.vpos(this.params.datum + halfRoadway) },\n      { x: this.hpos(this.params.right), y: this.vpos(this.params.datum + halfRoadway) },\n      { x: this.hpos(this.params.right), y: this.vpos(this.params.datum - halfRoadway) },\n      { x: this.hpos(this.params.left), y: this.vpos(this.params.datum - halfRoadway) }\n    ];\n\n    // Get elevation data for piers\n    const elevationData = this.generateBridgeElevation();\n    \n    // Piers in plan view\n    const piersInPlan: Array<{ points: Point2D[]; chainage: number }> = [];\n    for (const pier of elevationData.piers) {\n      const pierLength = 8.0; // Pier length across bridge width\n      const halfLength = pierLength / 2;\n      \n      piersInPlan.push({\n        points: [\n          { x: pier.points[0].x, y: this.vpos(this.params.datum + halfLength) },\n          { x: pier.points[1].x, y: this.vpos(this.params.datum + halfLength) },\n          { x: pier.points[1].x, y: this.vpos(this.params.datum - halfLength) },\n          { x: pier.points[0].x, y: this.vpos(this.params.datum - halfLength) }\n        ],\n        chainage: pier.chainage\n      });\n    }\n\n    // Abutments in plan view\n    const abutmentsInPlan: Array<{ points: Point2D[] }> = [\n      {\n        points: [\n          { x: this.hpos(this.params.left - 2.5), y: this.vpos(this.params.datum + halfWidth) },\n          { x: this.hpos(this.params.left), y: this.vpos(this.params.datum + halfWidth) },\n          { x: this.hpos(this.params.left), y: this.vpos(this.params.datum - halfWidth) },\n          { x: this.hpos(this.params.left - 2.5), y: this.vpos(this.params.datum - halfWidth) }\n        ]\n      },\n      {\n        points: [\n          { x: this.hpos(this.params.right), y: this.vpos(this.params.datum + halfWidth) },\n          { x: this.hpos(this.params.right + 2.5), y: this.vpos(this.params.datum + halfWidth) },\n          { x: this.hpos(this.params.right + 2.5), y: this.vpos(this.params.datum - halfWidth) },\n          { x: this.hpos(this.params.right), y: this.vpos(this.params.datum - halfWidth) }\n        ]\n      }\n    ];\n\n    // Plan view dimensions\n    const dimensions = [\n      {\n        start: { x: this.hpos(this.params.left), y: this.vpos(this.params.datum + halfWidth + 20) },\n        end: { x: this.hpos(this.params.right), y: this.vpos(this.params.datum + halfWidth + 20) },\n        value: `${(this.params.right - this.params.left).toFixed(0)}m`\n      },\n      {\n        start: { x: this.hpos(this.params.left) - 40, y: this.vpos(this.params.datum - halfWidth) },\n        end: { x: this.hpos(this.params.left) - 40, y: this.vpos(this.params.datum + halfWidth) },\n        value: `${bridgeWidth.toFixed(1)}m`\n      }\n    ];\n\n    return { deckOutline, piersInPlan, abutmentsInPlan, centerline, roadwayMarking, dimensions };\n  }\n\n  getCalculatedConstants(): CalculatedConstants {\n    return this.constants;\n  }\n\n  getParameters(): BridgeParameters {\n    return this.params;\n  }\n}\n","size_bytes":15460},"attached_assets/bridge-canvas_1755611337092.tsx":{"content":"import React, { useMemo, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DraftingCompass, Expand, RotateCcw, ZoomIn, CheckCircle, Building, Map } from \"lucide-react\";\nimport { BridgeCalculator, type BridgeParameters } from \"@/lib/bridge-calculations\";\n\ninterface BridgeCanvasProps {\n  parameters: BridgeParameters | null;\n  isGenerating?: boolean;\n}\n\nexport function BridgeCanvas({ parameters, isGenerating = false }: BridgeCanvasProps) {\n  const [activeTab, setActiveTab] = useState<string>(\"elevation\");\n  const [zoom, setZoom] = useState(100);\n\n  const bridgeData = useMemo(() => {\n    if (!parameters) return null;\n    \n    const calculator = new BridgeCalculator(parameters);\n    const layoutPoints = calculator.generateLayoutPoints();\n    const bridgeElevation = calculator.generateBridgeElevation();\n    const bridgePlan = calculator.generateBridgePlan();\n    \n    return {\n      calculator,\n      layoutPoints,\n      bridgeElevation,\n      bridgePlan\n    };\n  }, [parameters]);\n\n  if (!parameters || !bridgeData) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <DraftingCompass className=\"mr-2 h-5 w-5 text-primary\" />\n            Bridge General Arrangement Drawing (GAD)\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"border-2 border-gray-200 rounded-lg bg-white h-96 flex items-center justify-center\">\n            <div className=\"text-center text-gray-500\">\n              <DraftingCompass className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n              <p className=\"text-lg font-medium mb-2\">Ready to Generate Drawing</p>\n              <p className=\"text-sm\">Upload input parameters to create bridge elevation</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const { layoutPoints, bridgeElevation, bridgePlan } = bridgeData;\n  const scale = zoom / 100;\n\n  const renderElevationView = () => (\n    <div className=\"relative border-2 border-gray-300 rounded-lg bg-white overflow-hidden\" style={{ height: \"600px\" }}>\n      <div className=\"absolute inset-0 opacity-10\" style={{\n        backgroundImage: \"linear-gradient(#000 0.5px, transparent 0.5px), linear-gradient(90deg, #000 0.5px, transparent 0.5px)\",\n        backgroundSize: \"10px 10px\"\n      }} />\n      \n      <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 800 600\" className=\"absolute inset-0\" style={{ transform: `scale(${scale})` }}>\n        <text x=\"400\" y=\"30\" fontFamily=\"Arial, sans-serif\" fontSize=\"16\" fontWeight=\"bold\" fill=\"#000\" textAnchor=\"middle\">\n          BRIDGE ELEVATION - GENERAL ARRANGEMENT DRAWING\n        </text>\n        <text x=\"400\" y=\"50\" fontFamily=\"Arial, sans-serif\" fontSize=\"12\" fill=\"#666\" textAnchor=\"middle\">\n          Scale 1:{parameters.scale1} | Length: {(parameters.right - parameters.left).toFixed(0)}m\n        </text>\n\n        <g id=\"coordinate-system\" transform=\"translate(100, 450)\">\n          <line x1={layoutPoints.axes.xAxis[0].x} y1={-layoutPoints.axes.xAxis[0].y} \n                x2={layoutPoints.axes.xAxis[1].x} y2={-layoutPoints.axes.xAxis[1].y} \n                stroke=\"#333\" strokeWidth=\"2\" markerEnd=\"url(#arrowhead)\" />\n          <text x={layoutPoints.axes.xAxis[1].x + 20} y=\"15\" fontFamily=\"Arial\" fontSize=\"12\" fill=\"#333\">Chainage (m)</text>\n          \n          <line x1={layoutPoints.axes.yAxis[0].x} y1={-layoutPoints.axes.yAxis[0].y} \n                x2={layoutPoints.axes.yAxis[1].x} y2={-layoutPoints.axes.yAxis[1].y} \n                stroke=\"#333\" strokeWidth=\"2\" markerEnd=\"url(#arrowhead)\" />\n          <text x=\"-15\" y={-layoutPoints.axes.yAxis[1].y - 10} fontFamily=\"Arial\" fontSize=\"12\" fill=\"#333\">RL (m)</text>\n          \n          {layoutPoints.grid.xMarks.map((mark, index) => (\n            <g key={`x-mark-${index}`}>\n              <line x1={mark.position.x} y1={-5} x2={mark.position.x} y2={5} stroke=\"#333\" strokeWidth=\"1\" />\n              <text x={mark.position.x} y=\"20\" fontFamily=\"Arial\" fontSize=\"10\" fill=\"#333\" textAnchor=\"middle\">{mark.label}</text>\n            </g>\n          ))}\n          \n          {layoutPoints.grid.yMarks.map((mark, index) => (\n            <g key={`y-mark-${index}`}>\n              <line x1={-5} y1={-mark.position.y} x2={5} y2={-mark.position.y} stroke=\"#333\" strokeWidth=\"1\" />\n              <text x=\"-10\" y={-mark.position.y + 5} fontFamily=\"Arial\" fontSize=\"10\" fill=\"#333\" textAnchor=\"end\">{mark.label}</text>\n            </g>\n          ))}\n        </g>\n\n        <g id=\"bridge-structure\" transform=\"translate(100, 450)\">\n          <polygon points={bridgeElevation.deck.map(p => `${p.x},${-p.y}`).join(' ')} \n                   fill=\"#4A90E2\" stroke=\"#2C5282\" strokeWidth=\"2\" opacity=\"0.8\" />\n          \n          <line x1={bridgeElevation.superstructure[0].x} y1={-bridgeElevation.superstructure[0].y}\n                x2={bridgeElevation.superstructure[1].x} y2={-bridgeElevation.superstructure[1].y}\n                stroke=\"#2C5282\" strokeWidth=\"3\" />\n          \n          {bridgeElevation.piers.map((pier, index) => (\n            <g key={`pier-${index}`}>\n              <polygon points={pier.points.map(p => `${p.x},${-p.y}`).join(' ')} \n                       fill=\"#8B4513\" stroke=\"#654321\" strokeWidth=\"2\" />\n              <text x={(pier.points[0].x + pier.points[1].x) / 2} y={-pier.points[0].y + 15} \n                    fontFamily=\"Arial\" fontSize=\"10\" fill=\"#000\" textAnchor=\"middle\">\n                PIER {index + 1}\n              </text>\n            </g>\n          ))}\n          \n          {bridgeElevation.abutments.map((abutment, index) => (\n            <polygon key={`abutment-${index}`} points={abutment.points.map(p => `${p.x},${-p.y}`).join(' ')} \n                     fill=\"#696969\" stroke=\"#2F4F4F\" strokeWidth=\"2\" />\n          ))}\n          \n          {bridgeElevation.foundations.map((foundation, index) => (\n            <polygon key={`foundation-${index}`} points={foundation.points.map(p => `${p.x},${-p.y}`).join(' ')} \n                     fill=\"#A0522D\" stroke=\"#8B4513\" strokeWidth=\"1\" opacity=\"0.7\" />\n          ))}\n          \n          {bridgeElevation.dimensions.map((dim, index) => (\n            <g key={`dimension-${index}`}>\n              <line x1={dim.start.x} y1={-dim.start.y} x2={dim.end.x} y2={-dim.end.y} \n                    stroke=\"#FF6600\" strokeWidth=\"1\" markerStart=\"url(#dimArrow)\" markerEnd=\"url(#dimArrow)\" />\n              <text x={(dim.start.x + dim.end.x) / 2} y={-dim.start.y - 5} \n                    fontFamily=\"Arial\" fontSize=\"10\" fill=\"#FF6600\" textAnchor=\"middle\" fontWeight=\"bold\">\n                {dim.value}\n              </text>\n            </g>\n          ))}\n        </g>\n\n        <defs>\n          <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"9\" refY=\"3.5\" orient=\"auto\">\n            <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#333\"/>\n          </marker>\n          <marker id=\"dimArrow\" markerWidth=\"8\" markerHeight=\"6\" refX=\"4\" refY=\"3\" orient=\"auto\">\n            <polygon points=\"0 1, 6 3, 0 5\" fill=\"#FF6600\"/>\n          </marker>\n        </defs>\n      </svg>\n    </div>\n  );\n\n  const renderPlanView = () => (\n    <div className=\"relative border-2 border-gray-300 rounded-lg bg-white overflow-hidden\" style={{ height: \"600px\" }}>\n      <div className=\"absolute inset-0 opacity-10\" style={{\n        backgroundImage: \"linear-gradient(#000 0.5px, transparent 0.5px), linear-gradient(90deg, #000 0.5px, transparent 0.5px)\",\n        backgroundSize: \"10px 10px\"\n      }} />\n      \n      <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 800 600\" className=\"absolute inset-0\" style={{ transform: `scale(${scale})` }}>\n        <text x=\"400\" y=\"30\" fontFamily=\"Arial, sans-serif\" fontSize=\"16\" fontWeight=\"bold\" fill=\"#000\" textAnchor=\"middle\">\n          BRIDGE PLAN - GENERAL ARRANGEMENT DRAWING\n        </text>\n        <text x=\"400\" y=\"50\" fontFamily=\"Arial, sans-serif\" fontSize=\"12\" fill=\"#666\" textAnchor=\"middle\">\n          Scale 1:{parameters.scale1} | Width: 12.0m\n        </text>\n\n        <g id=\"bridge-plan\" transform=\"translate(100, 300)\">\n          <polygon points={bridgePlan.deckOutline.map(p => `${p.x},${-p.y}`).join(' ')} \n                   fill=\"#E8F4FD\" stroke=\"#4A90E2\" strokeWidth=\"3\" />\n          \n          <polygon points={bridgePlan.roadwayMarking.map(p => `${p.x},${-p.y}`).join(' ')} \n                   fill=\"none\" stroke=\"#FFD700\" strokeWidth=\"2\" strokeDasharray=\"5,5\" />\n          \n          <line x1={bridgePlan.centerline[0].x} y1={-bridgePlan.centerline[0].y}\n                x2={bridgePlan.centerline[1].x} y2={-bridgePlan.centerline[1].y}\n                stroke=\"#FF0000\" strokeWidth=\"2\" strokeDasharray=\"10,5\" />\n          <text x={(bridgePlan.centerline[0].x + bridgePlan.centerline[1].x) / 2} y={-bridgePlan.centerline[0].y + 15}\n                fontFamily=\"Arial\" fontSize=\"10\" fill=\"#FF0000\" textAnchor=\"middle\">℄ OF BRIDGE</text>\n          \n          {bridgePlan.piersInPlan.map((pier, index) => (\n            <g key={`pier-plan-${index}`}>\n              <polygon points={pier.points.map(p => `${p.x},${-p.y}`).join(' ')} \n                       fill=\"#8B4513\" stroke=\"#654321\" strokeWidth=\"2\" />\n              <text x={(pier.points[0].x + pier.points[2].x) / 2} y={-bridgePlan.centerline[0].y} \n                    fontFamily=\"Arial\" fontSize=\"10\" fill=\"#000\" textAnchor=\"middle\">\n                P{index + 1}\n              </text>\n            </g>\n          ))}\n          \n          {bridgePlan.abutmentsInPlan.map((abutment, index) => (\n            <polygon key={`abutment-plan-${index}`} points={abutment.points.map(p => `${p.x},${-p.y}`).join(' ')} \n                     fill=\"#696969\" stroke=\"#2F4F4F\" strokeWidth=\"2\" />\n          ))}\n          \n          {bridgePlan.dimensions.map((dim, index) => (\n            <g key={`plan-dimension-${index}`}>\n              <line x1={dim.start.x} y1={-dim.start.y} x2={dim.end.x} y2={-dim.end.y} \n                    stroke=\"#FF6600\" strokeWidth=\"1\" markerStart=\"url(#dimArrow)\" markerEnd=\"url(#dimArrow)\" />\n              <text x={(dim.start.x + dim.end.x) / 2} y={-dim.start.y - 5} \n                    fontFamily=\"Arial\" fontSize=\"10\" fill=\"#FF6600\" textAnchor=\"middle\" fontWeight=\"bold\">\n                {dim.value}\n              </text>\n            </g>\n          ))}\n        </g>\n\n        <defs>\n          <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"9\" refY=\"3.5\" orient=\"auto\">\n            <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#333\"/>\n          </marker>\n          <marker id=\"dimArrow\" markerWidth=\"8\" markerHeight=\"6\" refX=\"4\" refY=\"3\" orient=\"auto\">\n            <polygon points=\"0 1, 6 3, 0 5\" fill=\"#FF6600\"/>\n          </marker>\n        </defs>\n      </svg>\n    </div>\n  );\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center\">\n            <DraftingCompass className=\"mr-2 h-5 w-5 text-primary\" />\n            Bridge General Arrangement Drawing (GAD)\n            {isGenerating && (\n              <Badge variant=\"secondary\" className=\"ml-3 animate-pulse\">\n                <CheckCircle className=\"mr-1 h-3 w-3\" />\n                Generated\n              </Badge>\n            )}\n          </CardTitle>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={() => setZoom(Math.min(150, zoom + 25))}>\n              <ZoomIn className=\"h-4 w-4\" />\n            </Button>\n            \n            <Button variant=\"outline\" size=\"sm\" onClick={() => setZoom(Math.max(50, zoom - 25))}>\n              <RotateCcw className=\"h-4 w-4\" />\n            </Button>\n            \n            <Button variant=\"outline\" size=\"sm\" onClick={() => setZoom(100)}>\n              <Expand className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center justify-between text-sm text-gray-600\">\n          <div>\n            Bridge Length: {(parameters.right - parameters.left).toFixed(1)}m | \n            Height: {(parameters.toprl - parameters.datum).toFixed(1)}m |\n            Scale: {zoom}%\n          </div>\n          <Badge variant=\"outline\">Drawing Standards: BS 1192</Badge>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 mb-4\">\n            <TabsTrigger value=\"elevation\" className=\"flex items-center\">\n              <Building className=\"mr-2 h-4 w-4\" />\n              ELEVATION (Main)\n            </TabsTrigger>\n            <TabsTrigger value=\"plan\" className=\"flex items-center\">\n              <Map className=\"mr-2 h-4 w-4\" />\n              PLAN VIEW\n            </TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"elevation\" className=\"mt-0\">\n            {renderElevationView()}\n          </TabsContent>\n          \n          <TabsContent value=\"plan\" className=\"mt-0\">\n            {renderPlanView()}\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":13326},"attached_assets/bridge-generator_1755611308398.tsx":{"content":"import React, { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Play } from \"lucide-react\";\nimport { FileUpload } from \"@/components/ui/file-upload\";\nimport { ParameterDisplay } from \"@/components/parameter-display\";\nimport { ParameterEditor } from \"@/components/parameter-editor\";\nimport { BridgeCanvas } from \"@/components/bridge-canvas\";\nimport { ExportOptions } from \"@/components/export-options\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { BridgeCalculator, type BridgeParameters } from \"@/lib/bridge-calculations\";\nimport type { BridgeInput } from \"@shared/schema\";\n\ninterface ParsedBridgeData {\n  parameters: BridgeParameters;\n  calculatedValues: {\n    vvs: number;\n    hhs: number;\n    skew1: number;\n    sc: number;\n  };\n}\n\nexport default function BridgeGenerator() {\n  const [inputData, setInputData] = useState<string>(\"\");\n  const [fileName, setFileName] = useState<string>(\"\");\n  const [bridgeData, setBridgeData] = useState<ParsedBridgeData | null>(null);\n  const [currentProject, setCurrentProject] = useState<string | null>(null);\n  const [showParameterEditor, setShowParameterEditor] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Parse input file mutation\n  const parseInputMutation = useMutation({\n    mutationFn: async (inputContent: string) => {\n      const response = await apiRequest(\"POST\", \"/api/bridge/parse\", {\n        inputData: inputContent\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.success) {\n        setBridgeData({\n          parameters: data.parameters,\n          calculatedValues: data.calculatedValues\n        });\n        toast({\n          title: \"Input Parsed Successfully\",\n          description: \"Bridge parameters loaded and validated\"\n        });\n      }\n    },\n    onError: (error: any) => {\n      const errorMsg = error?.message || \"Failed to parse input file\";\n      toast({\n        title: \"Parse Error\",\n        description: errorMsg,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Create project mutation\n  const createProjectMutation = useMutation({\n    mutationFn: async (data: { name: string; inputData: string; parameters: BridgeInput }) => {\n      const response = await apiRequest(\"POST\", \"/api/bridge/project\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.success) {\n        setCurrentProject(data.project.id);\n        toast({\n          title: \"Project Created\",\n          description: \"Bridge project saved successfully\"\n        });\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Project Creation Failed\",\n        description: \"Unable to save bridge project\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleFileSelect = (content: string, filename: string) => {\n    setInputData(content);\n    setFileName(filename);\n    parseInputMutation.mutate(content);\n  };\n\n  const handleGenerateDrawing = () => {\n    if (!bridgeData) {\n      toast({\n        title: \"No Data\",\n        description: \"Please upload an input file first\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Create project with the parsed data\n    const projectName = fileName.replace(/\\.[^/.]+$/, \"\") || \"Bridge Project\";\n    \n    createProjectMutation.mutate({\n      name: projectName,\n      inputData: inputData,\n      parameters: bridgeData.parameters\n    });\n  };\n\n  const handleParametersChange = (newParameters: BridgeParameters) => {\n    if (bridgeData) {\n      setBridgeData({\n        ...bridgeData,\n        parameters: newParameters\n      });\n    }\n  };\n\n  const calculator = bridgeData ? new BridgeCalculator(bridgeData.parameters) : null;\n  const calculatedConstants = calculator?.getCalculatedConstants() || null;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-primary text-white shadow-lg\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"h-8 w-8 bg-white rounded flex items-center justify-center\">\n                <span className=\"text-primary font-bold text-sm\">B</span>\n              </div>\n              <h1 className=\"text-xl font-bold\" data-testid=\"app-title\">Bridge GAD Generator</h1>\n              <span className=\"bg-blue-800 px-2 py-1 rounded text-xs\">v2025.1</span>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button \n                variant=\"secondary\" \n                size=\"sm\" \n                className=\"bg-blue-800 hover:bg-blue-900\"\n                onClick={() => setShowParameterEditor(!showParameterEditor)}\n                data-testid=\"parameter-editor-toggle\"\n              >\n                {showParameterEditor ? \"Hide Editor\" : \"Edit Parameters\"}\n              </Button>\n              <Button \n                variant=\"secondary\" \n                size=\"sm\" \n                className=\"bg-blue-800 hover:bg-blue-900\"\n                data-testid=\"help-button\"\n              >\n                Help\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"container mx-auto px-6 py-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          \n          {/* Input Panel */}\n          <div className=\"lg:col-span-1 space-y-6\">\n            {/* File Upload Section */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg font-semibold\">\n                  Input Data File\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <FileUpload\n                  onFileSelect={handleFileSelect}\n                  accept=\".txt\"\n                  maxSize={1024 * 1024}\n                  disabled={parseInputMutation.isPending}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Parameters Display or Editor */}\n            {showParameterEditor ? (\n              <ParameterEditor\n                parameters={bridgeData?.parameters || null}\n                onParametersChange={handleParametersChange}\n                isCalculating={parseInputMutation.isPending}\n              />\n            ) : (\n              <ParameterDisplay\n                parameters={bridgeData?.parameters || null}\n                calculatedConstants={calculatedConstants}\n                isCalculating={parseInputMutation.isPending}\n              />\n            )}\n\n            {/* Generate Button */}\n            <Button\n              onClick={handleGenerateDrawing}\n              disabled={!bridgeData || createProjectMutation.isPending}\n              className=\"w-full h-12 text-lg\"\n              data-testid=\"generate-drawing-button\"\n            >\n              {createProjectMutation.isPending ? (\n                <>\n                  <div className=\"animate-spin h-5 w-5 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                  Creating Project...\n                </>\n              ) : (\n                <>\n                  <Play className=\"mr-2 h-5 w-5\" />\n                  Generate Bridge Drawing\n                </>\n              )}\n            </Button>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Drawing Canvas */}\n            <BridgeCanvas\n              parameters={bridgeData?.parameters || null}\n              isGenerating={parseInputMutation.isPending || createProjectMutation.isPending}\n            />\n\n            {/* Export Options */}\n            <ExportOptions\n              parameters={bridgeData?.parameters || null}\n              projectId={currentProject || undefined}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"bg-secondary text-white py-3 mt-8\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"flex items-center space-x-1\">\n                <div className=\"h-2 w-2 bg-green-400 rounded-full\"></div>\n                <span data-testid=\"status-ready\">Ready</span>\n              </span>\n              <span data-testid=\"calculations-status\">\n                Calculations: {bridgeData ? \"Complete\" : \"Waiting for input\"}\n              </span>\n              <span data-testid=\"last-generated\">\n                Last Generated: {currentProject ? new Date().toLocaleString() : \"None\"}\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <span>Bridge GAD Generator v2025.1</span>\n              <span>Based on AutoCAD LISP</span>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":9143},"attached_assets/download-section_1755611337092.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download, FileCode, FileText, Code } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface DownloadSectionProps {\n  projectId: string | null;\n  status: 'uploaded' | 'processing' | 'completed' | 'error';\n}\n\nexport function DownloadSection({ projectId, status }: DownloadSectionProps) {\n  const { toast } = useToast();\n\n  const handleDownload = async (type: 'dwg' | 'pdf' | 'lisp') => {\n    if (!projectId) {\n      toast({\n        title: \"No project selected\",\n        description: \"Please upload and generate a project first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/projects/${projectId}/download/${type}`);\n      \n      if (!response.ok) {\n        throw new Error('Download failed');\n      }\n\n      // Get filename from Content-Disposition header or use default\n      const contentDisposition = response.headers.get('Content-Disposition');\n      const filename = contentDisposition?.match(/filename=\"(.+)\"/)?.[1] || `bridge_${projectId}.${type}`;\n\n      // Create blob and download\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      toast({\n        title: \"Download started\",\n        description: `${type.toUpperCase()} file download initiated`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Download failed\",\n        description: error instanceof Error ? error.message : \"Unknown error occurred\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const isDownloadDisabled = status !== 'completed';\n\n  return (\n    <Card className=\"w-full\">\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n          <Download className=\"text-primary mr-2\" size={20} />\n          Download Files\n        </h3>\n        \n        <div className=\"space-y-3\">\n          <Button\n            variant=\"outline\"\n            className=\"w-full justify-between\"\n            onClick={() => handleDownload('dwg')}\n            disabled={isDownloadDisabled}\n          >\n            <div className=\"flex items-center space-x-3\">\n              <FileCode className=\"text-primary\" size={16} />\n              <div className=\"text-left\">\n                <p className=\"text-sm font-medium text-gray-900\">AutoCAD DWG</p>\n                <p className=\"text-xs text-gray-500\">For PC AutoCAD usage</p>\n              </div>\n            </div>\n            <Download className=\"text-gray-400\" size={16} />\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            className=\"w-full justify-between\"\n            onClick={() => handleDownload('pdf')}\n            disabled={isDownloadDisabled}\n          >\n            <div className=\"flex items-center space-x-3\">\n              <FileText className=\"text-red-500\" size={16} />\n              <div className=\"text-left\">\n                <p className=\"text-sm font-medium text-gray-900\">PDF Drawing</p>\n                <p className=\"text-xs text-gray-500\">For web viewing (A4 landscape)</p>\n              </div>\n            </div>\n            <Download className=\"text-gray-400\" size={16} />\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            className=\"w-full justify-between\"\n            onClick={() => handleDownload('lisp')}\n            disabled={isDownloadDisabled}\n          >\n            <div className=\"flex items-center space-x-3\">\n              <Code className=\"text-blue-500\" size={16} />\n              <div className=\"text-left\">\n                <p className=\"text-sm font-medium text-gray-900\">Updated LISP Code</p>\n                <p className=\"text-xs text-gray-500\">Corrected deficiencies</p>\n              </div>\n            </div>\n            <Download className=\"text-gray-400\" size={16} />\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4233},"attached_assets/drawing-generator_1755611337093.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Play, Compass } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { GenerationResponse } from \"@/lib/types\";\n\ninterface DrawingGeneratorProps {\n  projectId: string | null;\n  onGenerationStart: () => void;\n  disabled: boolean;\n}\n\nexport function DrawingGenerator({ projectId, onGenerationStart, disabled }: DrawingGeneratorProps) {\n  const [generating, setGenerating] = useState(false);\n  const [options, setOptions] = useState({\n    elevation: true,\n    plan: true,\n    side: true,\n  });\n  const { toast } = useToast();\n\n  const handleGenerate = async () => {\n    if (!projectId) {\n      toast({\n        title: \"No project selected\",\n        description: \"Please upload a GAD file first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setGenerating(true);\n    try {\n      const response = await apiRequest('POST', `/api/projects/${projectId}/generate`);\n      const data: GenerationResponse = await response.json();\n\n      if (data.success) {\n        toast({\n          title: \"Generation started\",\n          description: \"Your bridge drawings are being generated\",\n        });\n        onGenerationStart();\n      } else {\n        throw new Error(data.error || 'Generation failed');\n      }\n    } catch (error) {\n      toast({\n        title: \"Generation failed\",\n        description: error instanceof Error ? error.message : \"Unknown error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setGenerating(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n            <Compass className=\"text-primary mr-2\" size={20} />\n            Generate Drawings\n          </h2>\n          <span className=\"bg-gray-100 text-gray-600 px-3 py-1 rounded-full text-sm font-medium\">\n            Step 2\n          </span>\n        </div>\n\n        <div className=\"space-y-4 mb-6\">\n          <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n            <div className=\"flex items-center space-x-3\">\n              <Checkbox\n                id=\"elevation\"\n                checked={options.elevation}\n                onCheckedChange={(checked) => \n                  setOptions(prev => ({ ...prev, elevation: !!checked }))\n                }\n                className=\"border-gray-300\"\n              />\n              <label htmlFor=\"elevation\" className=\"font-medium text-gray-900 cursor-pointer\">\n                Main Bridge Elevation\n              </label>\n            </div>\n            <span className=\"text-sm text-green-600\">Fixed deficiencies</span>\n          </div>\n\n          <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n            <div className=\"flex items-center space-x-3\">\n              <Checkbox\n                id=\"plan\"\n                checked={options.plan}\n                onCheckedChange={(checked) => \n                  setOptions(prev => ({ ...prev, plan: !!checked }))\n                }\n                className=\"border-gray-300\"\n              />\n              <label htmlFor=\"plan\" className=\"font-medium text-gray-900 cursor-pointer\">\n                Bridge Plan View\n              </label>\n            </div>\n            <span className=\"text-sm text-green-600\">✓ Updated</span>\n          </div>\n\n          <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n            <div className=\"flex items-center space-x-3\">\n              <Checkbox\n                id=\"side\"\n                checked={options.side}\n                onCheckedChange={(checked) => \n                  setOptions(prev => ({ ...prev, side: !!checked }))\n                }\n                className=\"border-gray-300\"\n              />\n              <label htmlFor=\"side\" className=\"font-medium text-gray-900 cursor-pointer\">\n                Side Elevation\n              </label>\n            </div>\n            <span className=\"text-sm text-green-600\">✓ Corrected</span>\n          </div>\n        </div>\n\n        <Button\n          onClick={handleGenerate}\n          disabled={disabled || generating || !projectId}\n          className=\"w-full bg-primary hover:bg-primary/90\"\n        >\n          <Play className=\"mr-2\" size={16} />\n          {generating ? \"Generating Bridge Drawings...\" : \"Generate Bridge Drawings\"}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4739},"attached_assets/drizzle.config_1755609962679.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"attached_assets/drizzle.config_1755611162782.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"attached_assets/dwg-generator_1755611318411.ts":{"content":"import type { BridgeParameters } from \"./bridge-calculations\";\n\nexport interface DWGExportOptions {\n  paperSize: \"A4\" | \"A3\" | \"A2\";\n  orientation: \"landscape\" | \"portrait\";\n  scale: number;\n  includeDimensions: boolean;\n  includeTitleBlock: boolean;\n  includeGrid: boolean;\n}\n\nexport class DWGGenerator {\n  private parameters: BridgeParameters;\n  private scale: number = 1;\n  private skewAngle: number = 0;\n  private skewSin: number = 0;\n  private skewCos: number = 1;\n  \n  // Scale factors (from LISP code)\n  private hhs: number = 1;  // Horizontal scale\n  private vvs: number = 1;  // Vertical scale\n\n  constructor(parameters: BridgeParameters) {\n    this.parameters = this.initializeParameters(parameters);\n  }\n\n  private initializeParameters(params: BridgeParameters): BridgeParameters {\n    // Set default values\n    return {\n      scale1: 100,\n      datum: 0,\n      left: 0,\n      right: 100,\n      toprl: 0,\n      xincr: 10,\n      yincr: 2,\n      skew: 0,\n      noch: 0,\n      ...params\n    };\n  }\n\n  // Convert coordinates (from LISP hpos/vpos functions)\n  private hpos(x: number): number {\n    return (x - this.parameters.left) * this.scale * this.hhs;\n  }\n\n  private vpos(y: number): number {\n    return (y - this.parameters.datum) * this.scale * this.vvs;\n  }\n\n  // Apply skew transformation\n  private applySkew(x: number, y: number): { x: number; y: number } {\n    if (this.skewAngle === 0) return { x: this.hpos(x), y: this.vpos(y) };\n    \n    const x1 = x * this.skewCos - y * this.skewSin;\n    const y1 = x * this.skewSin + y * this.skewCos;\n    \n    return { x: this.hpos(x1), y: this.vpos(y1) };\n  }\n\n  // Draw line with skew support\n  private drawLine(\n    x1: number, y1: number,\n    x2: number, y2: number,\n    layer: string = \"0\",\n    color: number = 7,\n    lineweight: number = 0.25\n  ): string[] {\n    const p1 = this.applySkew(x1, y1);\n    const p2 = this.applySkew(x2, y2);\n    \n    return [\n      '0', 'LINE',\n      '8', layer,\n      '62', color.toString(),\n      '370', Math.round(lineweight * 100).toString(),\n      '10', p1.x.toFixed(2),\n      '20', p1.y.toFixed(2),\n      '11', p2.x.toFixed(2),\n      '21', p2.y.toFixed(2)\n    ];\n  }\n\n  // Draw text with skew support\n  private drawText(\n    x: number, y: number,\n    text: string,\n    height: number = 2.5,\n    layer: string = \"TEXT\",\n    color: number = 7,\n    angle: number = 0\n  ): string[] {\n    const pos = this.applySkew(x, y);\n    const rotation = angle + this.parameters.skew;\n    \n    return [\n      '0', 'TEXT',\n      '8', layer,\n      '62', color.toString(),\n      '10', pos.x.toFixed(2),\n      '20', pos.y.toFixed(2),\n      '40', height.toFixed(2),\n      '1', text,\n      '50', rotation.toFixed(2)\n    ];\n  }\n\n  // Generate DWG content\n  generateDWG(options: DWGExportOptions): { commands: string[] } {\n    this.scale = options.scale;\n    const commands: string[] = ['0', 'SECTION', '2', 'ENTITIES'];\n\n    // Add drawing elements here\n    if (options.includeGrid) {\n      this.drawGrid(commands);\n    }\n    \n    // Add bridge components (to be implemented)\n    this.drawBridge(commands);\n\n    // Close the section\n    commands.push('0', 'ENDSEC', '0', 'EOF');\n    return { commands };\n  }\n\n  // Draw grid based on xincr/yincr\n  private drawGrid(commands: string[]) {\n    const { left, right, datum, toprl, xincr, yincr } = this.parameters;\n    \n    // Vertical grid lines\n    for (let x = Math.ceil(left / xincr) * xincr; x <= right; x += xincr) {\n      commands.push(...this.drawLine(x, datum - 10, x, toprl + 5, \"GRID\", 8, 0.15));\n      if (x > left && x < right) {\n        commands.push(...this.drawText(x, datum - 2, x.toString(), 1.8, \"DIMENSIONS\"));\n      }\n    }\n    \n    // Horizontal grid lines\n    for (let y = Math.ceil(datum / yincr) * yincr; y <= toprl; y += yincr) {\n      commands.push(...this.drawLine(left - 5, y, right + 5, y, \"GRID\", 8, 0.15));\n      if (y > datum) {\n        commands.push(...this.drawText(left - 2, y, y.toString(), 1.8, \"DIMENSIONS\", 7, 90));\n      }\n    }\n  }\n\n  // Draw bridge components (placeholder)\n  private drawBridge(commands: string[]) {\n    // TODO: Implement bridge deck, piers, abutments based on LISP code\n    const { left, right, toprl } = this.parameters;\n    \n    // Example: Draw bridge deck\n    commands.push(...this.drawLine(left, toprl, right, toprl, \"BRIDGE_DECK\", 7, 0.5));\n    \n    // Add more bridge components here\n  }\n}\n\n// Export a simple function to generate DWG\nexport function generateDWG(\n  parameters: BridgeParameters,\n  options: DWGExportOptions\n): { commands: string[] } {\n  const generator = new DWGGenerator(parameters);\n  return generator.generateDWG(options);\n}\n","size_bytes":4633},"attached_assets/export-options_1755611337093.tsx":{"content":"import React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, File, Code, Download, Settings } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { BridgeParameters } from \"@/lib/bridge-calculations\";\n\ninterface ExportOptionsProps {\n  parameters: BridgeParameters | null;\n  projectId?: string;\n}\n\ninterface ExportSettings {\n  paperSize: \"A4\" | \"A3\" | \"A2\";\n  drawingScale: string;\n  includeDimensions: boolean;\n  includeTitleBlock: boolean;\n  includeGrid: boolean;\n}\n\nexport function ExportOptions({ parameters, projectId }: ExportOptionsProps) {\n  const [exportSettings, setExportSettings] = useState<ExportSettings>({\n    paperSize: \"A4\",\n    drawingScale: parameters ? `1:${parameters.scale1}` : \"1:100\",\n    includeDimensions: true,\n    includeTitleBlock: true,\n    includeGrid: false\n  });\n  const [isExporting, setIsExporting] = useState<Record<string, boolean>>({});\n  const [lispCode, setLispCode] = useState<string>(\"\");\n  const [showLispCode, setShowLispCode] = useState(false);\n  const { toast } = useToast();\n\n  const handleExportDWG = async () => {\n    if (!projectId) {\n      toast({\n        title: \"Export Error\",\n        description: \"No project selected for export.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsExporting(prev => ({ ...prev, dwg: true }));\n    \n    try {\n      const response = await fetch(`${API_BASE_URL}/api/bridge/export/dwg`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          projectId,\n          exportSettings: {\n            paperSize: exportSettings.paperSize,\n            drawingScale: exportSettings.drawingScale,\n            includeDimensions: exportSettings.includeDimensions,\n            includeTitleBlock: exportSettings.includeTitleBlock,\n            includeGrid: exportSettings.includeGrid\n          }\n        }),\n        credentials: 'include'\n      });\n\n      if (!response.ok) {\n        const error = await response.json().catch(() => ({}));\n        throw new Error(error.message || 'Failed to generate DWG export');\n      }\n\n      // Get the filename from the Content-Disposition header or create one\n      const contentDisposition = response.headers.get('Content-Disposition');\n      let filename = `bridge_export_${new Date().toISOString().split('T')[0]}.dwg`;\n      \n      if (contentDisposition) {\n        const filenameMatch = contentDisposition.match(/filename=\"?([^\"]+)\"?/);\n        if (filenameMatch && filenameMatch[1]) {\n          filename = filenameMatch[1];\n        }\n      }\n\n      // Get the response as a blob and create a download link\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      \n      // Clean up\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      toast({\n        title: \"DWG Export Complete\",\n        description: \"The drawing has been exported as a DWG file.\"\n      });\n      \n    } catch (error) {\n      console.error('DWG export error:', error);\n      toast({\n        title: \"Export Failed\",\n        description: error instanceof Error ? error.message : \"Failed to generate DWG export. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsExporting(prev => ({ ...prev, dwg: false }));\n    }\n  };\n\n  const handleExportPDF = async () => {\n    if (!parameters) {\n      toast({\n        title: \"Export Error\",\n        description: \"No drawing data available for PDF export.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsExporting(prev => ({ ...prev, pdf: true }));\n    \n    try {\n      // Find the canvas element - try different selectors to be safe\n      let canvas = document.querySelector('.bridge-canvas') as HTMLCanvasElement || \n                  document.querySelector('canvas');\n      \n      if (!canvas) {\n        // If canvas not found, try to find it in the DOM after a small delay\n        await new Promise(resolve => setTimeout(resolve, 500));\n        canvas = document.querySelector('.bridge-canvas') as HTMLCanvasElement || \n                document.querySelector('canvas');\n      }\n\n      if (!canvas) {\n        throw new Error('Drawing canvas not found. Please ensure the drawing is loaded.');\n      }\n      \n      // Create a temporary canvas to ensure we have enough resolution\n      const tempCanvas = document.createElement('canvas');\n      const ctx = tempCanvas.getContext('2d');\n      \n      if (!ctx) {\n        throw new Error('Could not create canvas context');\n      }\n      \n      // Set higher resolution for better quality\n      const scale = 2; // Increase for better quality\n      tempCanvas.width = canvas.width * scale;\n      tempCanvas.height = canvas.height * scale;\n      ctx.scale(scale, scale);\n      \n      // Draw the original canvas onto our high-res canvas\n      ctx.drawImage(canvas, 0, 0);\n      \n      // Get the image data\n      const imageData = tempCanvas.toDataURL('image/png', 1.0);\n      \n      // Create PDF with proper dimensions\n      const { jsPDF } = await import('jspdf');\n      const pdf = new jsPDF({\n        orientation: exportSettings.paperSize === 'A4' ? 'portrait' : 'landscape',\n        unit: 'mm',\n        format: exportSettings.paperSize.toLowerCase()\n      });\n\n      // Calculate dimensions\n      const pageWidth = pdf.internal.pageSize.getWidth();\n      const pageHeight = pdf.internal.pageSize.getHeight();\n      const ratio = tempCanvas.width / tempCanvas.height;\n      \n      let imgWidth = pageWidth - 20; // 10mm margin on each side\n      let imgHeight = imgWidth / ratio;\n      \n      // Adjust height if image is too tall\n      if (imgHeight > pageHeight - 20) {\n        imgHeight = pageHeight - 20;\n        imgWidth = imgHeight * ratio;\n      }\n      \n      // Center the image on the page\n      const x = (pageWidth - imgWidth) / 2;\n      const y = (pageHeight - imgHeight) / 2;\n      \n      // Add the image to the PDF\n      pdf.addImage(imageData, 'PNG', x, y, imgWidth, imgHeight);\n      \n      // Add title block if enabled\n      if (exportSettings.includeTitleBlock) {\n        pdf.setFontSize(12);\n        pdf.text(`Bridge GAD Drawing - Scale: ${exportSettings.drawingScale}`, 14, 20);\n        pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, 14, 28);\n      }\n      \n      // Save the PDF\n      pdf.save(`bridge_drawing_${new Date().toISOString().split('T')[0]}.pdf`);\n      \n      toast({\n        title: \"PDF Export Complete\",\n        description: \"The drawing has been exported as a PDF file.\"\n      });\n      \n    } catch (error) {\n      console.error('PDF export error:', error);\n      toast({\n        title: \"Export Failed\",\n        description: error instanceof Error ? error.message : \"Failed to generate PDF. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsExporting(prev => ({ ...prev, pdf: false }));\n    }\n  };\n\n  const handleGenerateLisp = async () => {\n    if (!parameters) {\n      toast({\n        title: \"Generation Error\",\n        description: \"No parameters available for LISP code generation.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsExporting(prev => ({ ...prev, lisp: true }));\n    \n    try {\n      const response = await apiRequest(\"POST\", \"/api/bridge/generate-lisp\", { parameters });\n      const data = await response.json();\n      \n      if (data.success) {\n        setLispCode(data.lispCode);\n        setShowLispCode(true);\n        toast({\n          title: \"LISP Code Generated\",\n          description: \"AutoCAD LISP script is ready for use\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Generation Failed\",\n        description: \"Unable to generate LISP code. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsExporting(prev => ({ ...prev, lisp: false }));\n    }\n  };\n\n  const copyLispCode = () => {\n    navigator.clipboard.writeText(lispCode);\n    toast({\n      title: \"Copied\",\n      description: \"LISP code copied to clipboard\"\n    });\n  };\n\n  if (!parameters) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Download className=\"mr-2 h-5 w-5 text-primary\" />\n            Export Options\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8 text-gray-500\">\n            <Download className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n            <p>Generate a drawing first to enable export options</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Download className=\"mr-2 h-5 w-5 text-primary\" />\n            Export Options\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"border border-gray-200 rounded-lg p-4 hover:border-primary transition-colors\">\n              <div className=\"text-center\">\n                <FileText className=\"h-8 w-8 text-orange-500 mx-auto mb-2\" />\n                <h4 className=\"font-semibold\">DWG Format</h4>\n                <p className=\"text-sm text-gray-600 mt-1\">AutoCAD Drawing File</p>\n                <p className=\"text-xs text-gray-500 mt-2\">3 A4 Landscape Pages</p>\n                <Button\n                  onClick={handleExportDWG}\n                  disabled={isExporting.dwg}\n                  className=\"mt-3 w-full bg-orange-500 hover:bg-orange-600 text-white\"\n                  data-testid=\"export-dwg-button\"\n                >\n                  {isExporting.dwg ? (\n                    <>\n                      <div className=\"animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                      Exporting...\n                    </>\n                  ) : (\n                    \"Export DWG\"\n                  )}\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"border border-gray-200 rounded-lg p-4 hover:border-primary transition-colors\">\n              <div className=\"text-center\">\n                <File className=\"h-8 w-8 text-red-600 mx-auto mb-2\" />\n                <h4 className=\"font-semibold\">PDF Format</h4>\n                <p className=\"text-sm text-gray-600 mt-1\">Portable Document</p>\n                <p className=\"text-xs text-gray-500 mt-2\">Print Ready A4</p>\n                <Button\n                  onClick={handleExportPDF}\n                  disabled={isExporting.pdf}\n                  className=\"mt-3 w-full bg-red-600 hover:bg-red-700 text-white\"\n                  data-testid=\"export-pdf-button\"\n                >\n                  {isExporting.pdf ? (\n                    <>\n                      <div className=\"animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                      Exporting...\n                    </>\n                  ) : (\n                    \"Export PDF\"\n                  )}\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"border border-gray-200 rounded-lg p-4 hover:border-primary transition-colors\">\n              <div className=\"text-center\">\n                <Code className=\"h-8 w-8 text-green-600 mx-auto mb-2\" />\n                <h4 className=\"font-semibold\">LISP Code</h4>\n                <p className=\"text-sm text-gray-600 mt-1\">AutoCAD LISP Script</p>\n                <p className=\"text-xs text-gray-500 mt-2\">Generated Commands</p>\n                <Button\n                  onClick={handleGenerateLisp}\n                  disabled={isExporting.lisp}\n                  className=\"mt-3 w-full bg-green-600 hover:bg-green-700 text-white\"\n                  data-testid=\"generate-lisp-button\"\n                >\n                  {isExporting.lisp ? (\n                    <>\n                      <div className=\"animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                      Generating...\n                    </>\n                  ) : (\n                    \"Generate Code\"\n                  )}\n                </Button>\n              </div>\n            </div>\n          </div>\n          \n          {/* Export Settings */}\n          <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h4 className=\"font-medium flex items-center\">\n                <Settings className=\"mr-2 h-4 w-4\" />\n                Export Settings\n              </h4>\n              {parameters && (\n                <Badge variant=\"outline\" data-testid=\"current-scale\">\n                  Current Scale: 1:{parameters.scale1}\n                </Badge>\n              )}\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Paper Size</label>\n                <Select\n                  value={exportSettings.paperSize}\n                  onValueChange={(value: \"A4\" | \"A3\" | \"A2\") => \n                    setExportSettings(prev => ({ ...prev, paperSize: value }))\n                  }\n                >\n                  <SelectTrigger data-testid=\"paper-size-selector\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"A4\">A4 Landscape</SelectItem>\n                    <SelectItem value=\"A3\">A3 Landscape</SelectItem>\n                    <SelectItem value=\"A2\">A2 Landscape</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Drawing Scale</label>\n                <Select\n                  value={exportSettings.drawingScale}\n                  onValueChange={(value) => \n                    setExportSettings(prev => ({ ...prev, drawingScale: value }))\n                  }\n                >\n                  <SelectTrigger data-testid=\"drawing-scale-selector\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value={`1:${parameters.scale1}`}>1:{parameters.scale1} (Plan/Elevation)</SelectItem>\n                    <SelectItem value={`1:${parameters.scale2}`}>1:{parameters.scale2} (Sections)</SelectItem>\n                    <SelectItem value=\"custom\">Custom Scale</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            \n            <div className=\"mt-4 flex flex-wrap gap-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"include-dimensions\"\n                  checked={exportSettings.includeDimensions}\n                  onCheckedChange={(checked) =>\n                    setExportSettings(prev => ({ ...prev, includeDimensions: checked as boolean }))\n                  }\n                  data-testid=\"include-dimensions-checkbox\"\n                />\n                <label htmlFor=\"include-dimensions\" className=\"text-sm\">Include dimensions</label>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"include-title-block\"\n                  checked={exportSettings.includeTitleBlock}\n                  onCheckedChange={(checked) =>\n                    setExportSettings(prev => ({ ...prev, includeTitleBlock: checked as boolean }))\n                  }\n                  data-testid=\"include-title-block-checkbox\"\n                />\n                <label htmlFor=\"include-title-block\" className=\"text-sm\">Include title block</label>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"include-grid\"\n                  checked={exportSettings.includeGrid}\n                  onCheckedChange={(checked) =>\n                    setExportSettings(prev => ({ ...prev, includeGrid: checked as boolean }))\n                  }\n                  data-testid=\"include-grid-checkbox\"\n                />\n                <label htmlFor=\"include-grid\" className=\"text-sm\">Include grid lines</label>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* LISP Code Preview */}\n      {showLispCode && lispCode && (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"flex items-center\">\n                <Code className=\"mr-2 h-5 w-5 text-primary\" />\n                Generated LISP Code Preview\n              </CardTitle>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={copyLispCode}\n                data-testid=\"copy-lisp-button\"\n              >\n                <Download className=\"mr-1 h-4 w-4\" />\n                Copy Code\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"bg-gray-900 text-gray-100 rounded-lg p-4 font-mono text-sm overflow-x-auto max-h-80 overflow-y-auto\">\n              <pre data-testid=\"lisp-code-display\">{lispCode}</pre>\n            </div>\n            \n            <div className=\"mt-3 text-sm text-gray-600 flex items-start space-x-2\">\n              <Code className=\"h-4 w-4 text-primary mt-0.5 flex-shrink-0\" />\n              <p>\n                This code implements the exact LISP functions from your reference file, including \n                coordinate transformations and AutoCAD drawing commands. Load this into AutoCAD \n                using the APPLOAD command.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":18558},"attached_assets/file-upload_1755611337093.tsx":{"content":"import { useState, useCallback } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Upload, File, X } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { UploadResponse } from \"@/lib/types\";\n\ninterface FileUploadProps {\n  onUploadSuccess: (projectId: string, projectData: any) => void;\n}\n\nexport function FileUpload({ onUploadSuccess }: FileUploadProps) {\n  const [dragActive, setDragActive] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const [uploadedFile, setUploadedFile] = useState<File | null>(null);\n  const { toast } = useToast();\n\n  const handleDrag = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  }, []);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n\n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n      const file = e.dataTransfer.files[0];\n      if (file.name.toLowerCase().endsWith('.txt')) {\n        setUploadedFile(file);\n      } else {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please upload a .txt file\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  }, [toast]);\n\n  const handleFileSelect = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const file = e.target.files[0];\n      if (file.name.toLowerCase().endsWith('.txt')) {\n        setUploadedFile(file);\n      } else {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please upload a .txt file\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  }, [toast]);\n\n  const handleUpload = async () => {\n    if (!uploadedFile) return;\n\n    setUploading(true);\n    try {\n      const formData = new FormData();\n      formData.append('gadFile', uploadedFile);\n\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      const data: UploadResponse = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Upload failed');\n      }\n\n      if (data.success && data.project) {\n        toast({\n          title: \"File uploaded successfully\",\n          description: \"Bridge parameters parsed and ready for generation\",\n        });\n        onUploadSuccess(data.project.id, data.project);\n      }\n    } catch (error) {\n      toast({\n        title: \"Upload failed\",\n        description: error instanceof Error ? error.message : \"Unknown error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const removeFile = () => {\n    setUploadedFile(null);\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n            <Upload className=\"text-primary mr-2\" size={20} />\n            Upload GAD Input File\n          </h2>\n          <span className=\"bg-gray-100 text-gray-600 px-3 py-1 rounded-full text-sm font-medium\">\n            Step 1\n          </span>\n        </div>\n\n        {!uploadedFile ? (\n          <div\n            className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors cursor-pointer ${\n              dragActive ? \"border-primary bg-primary/5\" : \"border-gray-300 hover:border-primary\"\n            }`}\n            onDragEnter={handleDrag}\n            onDragLeave={handleDrag}\n            onDragOver={handleDrag}\n            onDrop={handleDrop}\n            onClick={() => document.getElementById('file-input')?.click()}\n          >\n            <div className=\"space-y-4\">\n              <div className=\"mx-auto w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center\">\n                <File className=\"text-gray-400\" size={24} />\n              </div>\n              <div>\n                <p className=\"text-lg font-medium text-gray-900\">Upload GAD.txt File</p>\n                <p className=\"text-sm text-gray-500 mt-1\">\n                  Click to browse or drag and drop your bridge parameter file\n                </p>\n              </div>\n              <p className=\"text-xs text-gray-400\">Supported format: .txt (max 10MB)</p>\n            </div>\n            <input\n              id=\"file-input\"\n              type=\"file\"\n              accept=\".txt\"\n              onChange={handleFileSelect}\n              className=\"hidden\"\n            />\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            <div className=\"bg-gray-50 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <File className=\"text-primary\" size={20} />\n                  <div>\n                    <p className=\"font-medium text-gray-900\">{uploadedFile.name}</p>\n                    <p className=\"text-sm text-gray-500\">\n                      {(uploadedFile.size / 1024).toFixed(1)} KB\n                    </p>\n                  </div>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={removeFile}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <X size={16} />\n                </Button>\n              </div>\n            </div>\n\n            <Button\n              onClick={handleUpload}\n              disabled={uploading}\n              className=\"w-full bg-primary hover:bg-primary/90\"\n            >\n              {uploading ? \"Uploading...\" : \"Upload and Process File\"}\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6055},"attached_assets/home_1755611202538.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { FileUpload } from \"@/components/file-upload\";\nimport { DrawingGenerator } from \"@/components/drawing-generator\";\nimport { ProgressTracker } from \"@/components/progress-tracker\";\nimport { DownloadSection } from \"@/components/download-section\";\nimport { BusFront, Info, Settings, HelpCircle, Book, Bug } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ProjectStatus } from \"@/lib/types\";\n\nexport default function Home() {\n  const [currentProject, setCurrentProject] = useState<string | null>(null);\n  const [projectData, setProjectData] = useState<any>(null);\n\n  // Poll for project status updates\n  const { data: project, refetch } = useQuery<ProjectStatus>({\n    queryKey: ['/api/projects', currentProject],\n    enabled: !!currentProject,\n    refetchInterval: currentProject ? 2000 : false, // Poll every 2 seconds when active\n  });\n\n  const handleUploadSuccess = (projectId: string, data: any) => {\n    setCurrentProject(projectId);\n    setProjectData(data);\n  };\n\n  const handleGenerationStart = () => {\n    // Start polling for updates\n    refetch();\n  };\n\n  const getProgress = (): number => {\n    if (!project) return 0;\n    return parseInt(project.progress) || 0;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-primary text-white p-2 rounded-lg\">\n                <BusFront size={24} />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-semibold text-gray-900\">BusFront GAD Drafter</h1>\n                <p className=\"text-sm text-gray-500\">General Arrangement Drawing Generator</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" size=\"sm\">\n                <HelpCircle className=\"mr-2\" size={16} />\n                Help\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                <Settings className=\"mr-2\" size={16} />\n                Settings\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Status Banner */}\n        <Alert className=\"mb-6 bg-blue-50 border-blue-200\">\n          <Info className=\"h-4 w-4 text-primary\" />\n          <AlertDescription className=\"text-blue-800\">\n            <strong>LISP Code Enhancement Status:</strong> Main bridge elevation drawing deficiencies corrected. \n            All coordinate transformations and scaling functions updated.\n          </AlertDescription>\n        </Alert>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            <FileUpload onUploadSuccess={handleUploadSuccess} />\n            \n            {projectData && (\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"font-medium text-gray-900 mb-3\">BusFront Parameters Preview</h3>\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-gray-500\">Plan Scale:</span>\n                      <span className=\"ml-2 font-medium\">1:{projectData.parameters?.planScale || 100}</span>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-500\">Section Scale:</span>\n                      <span className=\"ml-2 font-medium\">1:{projectData.parameters?.sectionScale || 50}</span>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-500\">Skew Angle:</span>\n                      <span className=\"ml-2 font-medium\">{projectData.parameters?.skewAngle || 0}°</span>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-500\">BusFront Length:</span>\n                      <span className=\"ml-2 font-medium\">{projectData.parameters?.bridgeLength || 0}m</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            <DrawingGenerator \n              projectId={currentProject}\n              onGenerationStart={handleGenerationStart}\n              disabled={!currentProject}\n            />\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            <ProgressTracker \n              status={project?.status || 'uploaded'}\n              progress={getProgress()}\n              errorMessage={project?.errorMessage || undefined}\n            />\n\n            {/* LISP Code Status */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n                  <BusFront className=\"text-primary mr-2\" size={20} />\n                  LISP Code Status\n                </h3>\n                \n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n                    <div>\n                      <p className=\"text-sm font-medium text-green-800\">Main Elevation Fixed</p>\n                      <p className=\"text-xs text-green-600\">Coordinate transformation corrected</p>\n                    </div>\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n                    <div>\n                      <p className=\"text-sm font-medium text-green-800\">Scaling Functions</p>\n                      <p className=\"text-xs text-green-600\">vpos, hpos, v2pos, h2pos updated</p>\n                    </div>\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n                    <div>\n                      <p className=\"text-sm font-medium text-green-800\">Drawing Commands</p>\n                      <p className=\"text-xs text-green-600\">AutoCAD plotting commands verified</p>\n                    </div>\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <DownloadSection \n              projectId={currentProject}\n              status={project?.status || 'uploaded'}\n            />\n          </div>\n        </div>\n\n        {/* Technical Specifications */}\n        <Card className=\"mt-8\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-6 flex items-center\">\n              <Settings className=\"text-primary mr-2\" size={20} />\n              Technical Specifications & LISP Code Corrections\n            </h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <div className=\"bg-gray-50 rounded-lg p-4\">\n                <h4 className=\"font-medium text-gray-900 mb-3\">Input Parameters</h4>\n                <ul className=\"text-sm text-gray-600 space-y-1\">\n                  <li>• Scale factors (plan/elevation/sections)</li>\n                  <li>• Skew angle in degrees</li>\n                  <li>• Datum and reference levels</li>\n                  <li>• Chainage start/end points</li>\n                  <li>• Increment intervals (X/Y axis)</li>\n                  <li>• Total number of chainages</li>\n                </ul>\n              </div>\n              \n              <div className=\"bg-gray-50 rounded-lg p-4\">\n                <h4 className=\"font-medium text-gray-900 mb-3\">Drawing Views</h4>\n                <ul className=\"text-sm text-gray-600 space-y-1\">\n                  <li>• Main bridge elevation (corrected)</li>\n                  <li>• Plan view with dimensions</li>\n                  <li>• Side elevation views</li>\n                  <li>• Cross-sectional details</li>\n                  <li>• A4 landscape layout format</li>\n                  <li>• AutoCAD dimension styles</li>\n                </ul>\n              </div>\n              \n              <div className=\"bg-gray-50 rounded-lg p-4\">\n                <h4 className=\"font-medium text-gray-900 mb-3\">Code Corrections</h4>\n                <ul className=\"text-sm text-gray-600 space-y-1\">\n                  <li>• Fixed coordinate transformation functions</li>\n                  <li>• Corrected scaling calculations (vvs/hhs)</li>\n                  <li>• Updated plot command sequences</li>\n                  <li>• Enhanced dimension style settings</li>\n                  <li>• Improved layout positioning</li>\n                  <li>• Maintained existing variable structure</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-white border-t border-gray-200 mt-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"flex items-center space-x-4 mb-4 md:mb-0\">\n              <p className=\"text-sm text-gray-500\">BusFront GAD Drafter v2.1</p>\n              <span className=\"text-gray-300\">|</span>\n              <p className=\"text-sm text-gray-500\">Engineering Drawing Automation</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-500\">\n                <Book className=\"mr-1\" size={14} />\n                Documentation\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-500\">\n                <Bug className=\"mr-1\" size={14} />\n                Report Issue\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-500\">\n                <Info className=\"mr-1\" size={14} />\n                About\n              </Button>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":10680},"attached_assets/index_1755609978417.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"attached_assets/index_1755611177326.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 3000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '3000', 10);\n  const host = process.env.HOST || '127.0.0.1';\n  \n  // Create HTTP server\n  const httpServer = server.listen(port, host, () => {\n    log(`Server running at http://${host}:${port}`);\n  });\n\n  // Handle server errors\n  httpServer.on('error', (error: NodeJS.ErrnoException) => {\n    if (error.syscall !== 'listen') {\n      throw error;\n    }\n\n    switch (error.code) {\n      case 'EACCES':\n        log(`Port ${port} requires elevated privileges`);\n        process.exit(1);\n        break;\n      case 'EADDRINUSE':\n        log(`Port ${port} is already in use`);\n        process.exit(1);\n        break;\n      default:\n        throw error;\n    }\n  });\n\n  // Handle process termination\n  process.on('SIGTERM', () => {\n    log('SIGTERM received. Shutting down gracefully');\n    httpServer.close(() => {\n      log('Server stopped');\n    });\n  });\n})();\n","size_bytes":2764},"attached_assets/index_1755611196408.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&family=Roboto+Mono:wght@400;500&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 98%);\n  --foreground: hsl(210, 25%, 7.8%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 25%, 7.8%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8%);\n  --primary: hsl(210, 87%, 45%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 11%, 25%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(210, 25%, 7.8%);\n  --accent: hsl(28, 96%, 58%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 97%);\n  --ring: hsl(210, 87%, 45%);\n  --chart-1: hsl(210, 87%, 45%);\n  --chart-2: hsl(159, 78%, 36%);\n  --chart-3: hsl(28, 96%, 58%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(342, 75%, 51%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(210, 25%, 7.8%);\n  --sidebar-primary: hsl(210, 87%, 45%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(214, 32%, 91%);\n  --sidebar-accent-foreground: hsl(210, 87%, 45%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(210, 87%, 45%);\n  --font-roboto: 'Roboto', sans-serif;\n  --font-roboto-mono: 'Roboto Mono', monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 7%, 91%);\n  --card: hsl(228, 10%, 10%);\n  --card-foreground: hsl(0, 0%, 85%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 7%, 91%);\n  --primary: hsl(210, 88%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195, 15%, 95%);\n  --secondary-foreground: hsl(210, 25%, 8%);\n  --muted: hsl(0, 0%, 9%);\n  --muted-foreground: hsl(210, 3%, 46%);\n  --accent: hsl(206, 70%, 8%);\n  --accent-foreground: hsl(210, 88%, 53%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5%, 15%);\n  --input: hsl(208, 28%, 18%);\n  --ring: hsl(210, 87%, 45%);\n  --chart-1: hsl(210, 87%, 45%);\n  --chart-2: hsl(159, 78%, 36%);\n  --chart-3: hsl(28, 96%, 58%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(342, 75%, 51%);\n  --sidebar: hsl(228, 10%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85%);\n  --sidebar-primary: hsl(210, 87%, 45%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(206, 70%, 8%);\n  --sidebar-accent-foreground: hsl(210, 88%, 53%);\n  --sidebar-border: hsl(206, 16%, 26%);\n  --sidebar-ring: hsl(210, 87%, 45%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: var(--font-roboto);\n  }\n\n  .font-mono {\n    font-family: var(--font-roboto-mono);\n  }\n}\n\n/* Bridge-specific styling */\n.bridge-canvas svg {\n  background: white;\n}\n\n.bridge-canvas .grid-background {\n  opacity: 0.1;\n  stroke: #ddd;\n  stroke-width: 1px;\n}\n\n.bridge-element {\n  transition: all 0.2s ease-in-out;\n}\n\n.bridge-element:hover {\n  stroke-width: 3px;\n  opacity: 0.8;\n}\n\n.dimension-line {\n  stroke: var(--accent);\n  stroke-width: 1px;\n  fill: none;\n}\n\n.dimension-text {\n  fill: var(--accent);\n  font-family: Arial, sans-serif;\n  font-size: 12px;\n  text-anchor: middle;\n}\n\n/* Code display styling */\n.lisp-code-display {\n  background: hsl(220, 26%, 14%);\n  color: hsl(220, 14%, 71%);\n  font-family: var(--font-roboto-mono);\n  line-height: 1.5;\n}\n\n.lisp-code-display .keyword {\n  color: hsl(207, 82%, 66%);\n}\n\n.lisp-code-display .comment {\n  color: hsl(101, 29%, 47%);\n  font-style: italic;\n}\n\n.lisp-code-display .string {\n  color: hsl(41, 99%, 66%);\n}\n\n.lisp-code-display .number {\n  color: hsl(338, 95%, 56%);\n}\n\n/* File upload styling */\n.file-upload-zone {\n  background: linear-gradient(135deg, hsl(0, 0%, 98%) 0%, hsl(214, 32%, 97%) 100%);\n  border: 2px dashed hsl(214, 32%, 91%);\n  transition: all 0.2s ease-in-out;\n}\n\n.file-upload-zone:hover {\n  border-color: var(--primary);\n  background: linear-gradient(135deg, hsl(210, 100%, 98%) 0%, hsl(210, 100%, 95%) 100%);\n}\n\n.file-upload-zone.drag-active {\n  border-color: var(--primary);\n  background: hsl(210, 100%, 95%);\n  transform: scale(1.02);\n}\n\n/* Export button styling */\n.export-option {\n  transition: all 0.2s ease-in-out;\n  cursor: pointer;\n}\n\n.export-option:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n}\n\n/* Status indicators */\n.status-indicator {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.status-dot {\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  background: currentColor;\n}\n\n.status-dot.ready {\n  color: hsl(142, 71%, 45%);\n}\n\n.status-dot.processing {\n  color: hsl(28, 96%, 58%);\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n.status-dot.error {\n  color: hsl(0, 84%, 60%);\n}\n\n/* Animation utilities */\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: .5;\n  }\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n  .bridge-canvas {\n    overflow-x: auto;\n  }\n  \n  .export-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .parameter-grid {\n    grid-template-columns: 1fr;\n  }\n}\n\n/* Print styles for PDF export */\n@media print {\n  body {\n    background: white;\n    color: black;\n  }\n  \n  .no-print {\n    display: none !important;\n  }\n  \n  .bridge-canvas svg {\n    width: 100%;\n    height: auto;\n    max-height: none;\n  }\n}\n","size_bytes":5526},"attached_assets/main_1755609993515.py":{"content":"from fastapi import FastAPI, HTTPException, UploadFile, File, Response\r\nfrom fastapi.middleware.cors import CORSMiddleware\r\nfrom fastapi.responses import FileResponse\r\nimport ezdxf\r\nfrom ezdxf import units\r\nfrom pydantic import BaseModel\r\nfrom typing import List, Dict, Any, Optional\r\nimport tempfile\r\nimport os\r\nimport json\r\nfrom datetime import datetime\r\n\r\napp = FastAPI(title=\"BridgeGAD DWG Export Service\")\r\n\r\n# CORS middleware to allow requests from the frontend\r\napp.add_middleware(\r\n    CORSMiddleware,\r\n    allow_origins=[\"*\"],\r\n    allow_credentials=True,\r\n    allow_methods=[\"*\"],\r\n    allow_headers=[\"*\"],\r\n)\r\n\r\nclass BridgeParameters(BaseModel):\r\n    scale1: float\r\n    datum: float\r\n    left: float\r\n    right: float\r\n    toprl: float\r\n    skew: float\r\n    d1: float\r\n    xincr: float\r\n    yincr: float\r\n    nspan: int\r\n    lbridge: float\r\n    abtl: float\r\n    RTL: float\r\n    sofl: float\r\n    kerbw: float\r\n    kerbd: float\r\n    ccbr: float\r\n    slbthc: float\r\n    slbthe: float\r\n    slbtht: float\r\n    capt: float\r\n    capb: float\r\n    capw: float\r\n    piertw: float\r\n    battr: float\r\n    pierst: float\r\n\r\nclass CrossSection(BaseModel):\r\n    chainage: float\r\n    level: float\r\n    type: str = \"Ground\"\r\n\r\nclass BridgeData(BaseModel):\r\n    parameters: BridgeParameters\r\n    crossSections: List[CrossSection]\r\n\r\ndef create_bridge_drawing(data: BridgeData, output_path: str):\r\n    \"\"\"Create a DWG file with bridge drawing\"\"\"\r\n    # Create a new DXF document (AutoCAD 2010)\r\n    doc = ezdxf.new(dxfversion='R2010')\r\n    doc.units = units.M\r\n    \r\n    # Add layers\r\n    doc.layers.add(\"BRIDGE\", color=1)\r\n    doc.layers.add(\"DIMENSIONS\", color=5)\r\n    doc.layers.add(\"TEXT\", color=3)\r\n    doc.layers.add(\"GRID\", color=8, linetype=\"DASHED\")\r\n    \r\n    msp = doc.modelspace()\r\n    \r\n    # Add title block\r\n    msp.add_text(\"BRIDGE DRAWING\", dxfattribs={\r\n        'layer': 'TEXT',\r\n        'height': 5.0,\r\n        'style': 'Standard'\r\n    }).set_pos((100, 290), align='MIDDLE_CENTER')\r\n    \r\n    # Add parameters\r\n    msp.add_text(f\"Scale: 1:{data.parameters.scale1}\", dxfattribs={\r\n        'layer': 'TEXT',\r\n        'height': 2.5,\r\n        'style': 'Standard'\r\n    }).set_pos((20, 280))\r\n    \r\n    # Draw bridge outline (simplified for example)\r\n    msp.add_line((0, 0), (data.parameters.lbridge, 0), dxfattribs={'layer': 'BRIDGE'})\r\n    \r\n    # Add cross-sections\r\n    for i in range(len(data.crossSections) - 1):\r\n        p1 = data.crossSections[i]\r\n        p2 = data.crossSections[i + 1]\r\n        msp.add_line(\r\n            (p1.chainage, p1.level),\r\n            (p2.chainage, p2.level),\r\n            dxfattribs={'layer': 'GRID'}\r\n        )\r\n    \r\n    # Save the DXF file\r\n    doc.saveas(output_path)\r\n\r\n@app.post(\"/api/export/dwg\")\r\nasync def export_dwg(bridge_data: BridgeData):\r\n    \"\"\"Export bridge data to DWG format\"\"\"\r\n    try:\r\n        # Create a temporary file\r\n        with tempfile.NamedTemporaryFile(delete=False, suffix='.dwg') as tmp_file:\r\n            temp_path = tmp_file.name\r\n        \r\n        # Generate the DWG file\r\n        create_bridge_drawing(bridge_data, temp_path)\r\n        \r\n        # Return the file\r\n        return FileResponse(\r\n            path=temp_path,\r\n            filename=f\"bridge_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.dwg\",\r\n            media_type='application/acad'\r\n        )\r\n    except Exception as e:\r\n        raise HTTPException(status_code=500, detail=str(e))\r\n    finally:\r\n        # Clean up the temporary file after sending\r\n        if os.path.exists(temp_path):\r\n            os.unlink(temp_path)\r\n\r\nif __name__ == \"__main__\":\r\n    import uvicorn\r\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\r\n","size_bytes":3668},"attached_assets/main_1755611123750.py":{"content":"from fastapi import FastAPI, HTTPException, UploadFile, File, Response\r\nfrom fastapi.middleware.cors import CORSMiddleware\r\nfrom fastapi.responses import FileResponse\r\nimport ezdxf\r\nfrom ezdxf import units\r\nfrom pydantic import BaseModel\r\nfrom typing import List, Dict, Any, Optional\r\nimport tempfile\r\nimport os\r\nimport json\r\nfrom datetime import datetime\r\n\r\napp = FastAPI(title=\"BridgeGAD DWG Export Service\")\r\n\r\n# CORS middleware to allow requests from the frontend\r\napp.add_middleware(\r\n    CORSMiddleware,\r\n    allow_origins=[\"*\"],\r\n    allow_credentials=True,\r\n    allow_methods=[\"*\"],\r\n    allow_headers=[\"*\"],\r\n)\r\n\r\nclass BridgeParameters(BaseModel):\r\n    scale1: float\r\n    datum: float\r\n    left: float\r\n    right: float\r\n    toprl: float\r\n    skew: float\r\n    d1: float\r\n    xincr: float\r\n    yincr: float\r\n    nspan: int\r\n    lbridge: float\r\n    abtl: float\r\n    RTL: float\r\n    sofl: float\r\n    kerbw: float\r\n    kerbd: float\r\n    ccbr: float\r\n    slbthc: float\r\n    slbthe: float\r\n    slbtht: float\r\n    capt: float\r\n    capb: float\r\n    capw: float\r\n    piertw: float\r\n    battr: float\r\n    pierst: float\r\n\r\nclass CrossSection(BaseModel):\r\n    chainage: float\r\n    level: float\r\n    type: str = \"Ground\"\r\n\r\nclass BridgeData(BaseModel):\r\n    parameters: BridgeParameters\r\n    crossSections: List[CrossSection]\r\n\r\ndef create_bridge_drawing(data: BridgeData, output_path: str):\r\n    \"\"\"Create a DWG file with bridge drawing\"\"\"\r\n    # Create a new DXF document (AutoCAD 2010)\r\n    doc = ezdxf.new(dxfversion='R2010')\r\n    doc.units = units.M\r\n    \r\n    # Add layers\r\n    doc.layers.add(\"BRIDGE\", color=1)\r\n    doc.layers.add(\"DIMENSIONS\", color=5)\r\n    doc.layers.add(\"TEXT\", color=3)\r\n    doc.layers.add(\"GRID\", color=8, linetype=\"DASHED\")\r\n    \r\n    msp = doc.modelspace()\r\n    \r\n    # Add title block\r\n    msp.add_text(\"BRIDGE DRAWING\", dxfattribs={\r\n        'layer': 'TEXT',\r\n        'height': 5.0,\r\n        'style': 'Standard'\r\n    }).set_pos((100, 290), align='MIDDLE_CENTER')\r\n    \r\n    # Add parameters\r\n    msp.add_text(f\"Scale: 1:{data.parameters.scale1}\", dxfattribs={\r\n        'layer': 'TEXT',\r\n        'height': 2.5,\r\n        'style': 'Standard'\r\n    }).set_pos((20, 280))\r\n    \r\n    # Draw bridge outline (simplified for example)\r\n    msp.add_line((0, 0), (data.parameters.lbridge, 0), dxfattribs={'layer': 'BRIDGE'})\r\n    \r\n    # Add cross-sections\r\n    for i in range(len(data.crossSections) - 1):\r\n        p1 = data.crossSections[i]\r\n        p2 = data.crossSections[i + 1]\r\n        msp.add_line(\r\n            (p1.chainage, p1.level),\r\n            (p2.chainage, p2.level),\r\n            dxfattribs={'layer': 'GRID'}\r\n        )\r\n    \r\n    # Save the DXF file\r\n    doc.saveas(output_path)\r\n\r\n@app.post(\"/api/export/dwg\")\r\nasync def export_dwg(bridge_data: BridgeData):\r\n    \"\"\"Export bridge data to DWG format\"\"\"\r\n    try:\r\n        # Create a temporary file\r\n        with tempfile.NamedTemporaryFile(delete=False, suffix='.dwg') as tmp_file:\r\n            temp_path = tmp_file.name\r\n        \r\n        # Generate the DWG file\r\n        create_bridge_drawing(bridge_data, temp_path)\r\n        \r\n        # Return the file\r\n        return FileResponse(\r\n            path=temp_path,\r\n            filename=f\"bridge_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.dwg\",\r\n            media_type='application/acad'\r\n        )\r\n    except Exception as e:\r\n        raise HTTPException(status_code=500, detail=str(e))\r\n    finally:\r\n        # Clean up the temporary file after sending\r\n        if os.path.exists(temp_path):\r\n            os.unlink(temp_path)\r\n\r\nif __name__ == \"__main__\":\r\n    import uvicorn\r\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\r\n","size_bytes":3668},"attached_assets/main_1755611196408.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"attached_assets/not-found_1755611202538.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"attached_assets/parameter-display_1755611337093.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calculator, CheckCircle, Clock } from \"lucide-react\";\nimport type { BridgeParameters, CalculatedConstants } from \"@/lib/bridge-calculations\";\n\ninterface ParameterDisplayProps {\n  parameters: BridgeParameters | null;\n  calculatedConstants: CalculatedConstants | null;\n  isCalculating?: boolean;\n}\n\nexport function ParameterDisplay({ \n  parameters, \n  calculatedConstants, \n  isCalculating = false \n}: ParameterDisplayProps) {\n  if (!parameters) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Calculator className=\"mr-2 h-5 w-5 text-primary\" />\n            Input Parameters\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8 text-gray-500\">\n            <Calculator className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n            <p>Upload an input file to view parameters</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const formatChainage = (left: number, right: number) => {\n    const formatSingle = (val: number) => {\n      const km = Math.floor(val / 1000);\n      const m = val % 1000;\n      return `${km}+${m.toFixed(0).padStart(3, '0')}`;\n    };\n    return `${formatSingle(left)} to ${formatSingle(right)}`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Calculator className=\"mr-2 h-5 w-5 text-primary\" />\n            Input Parameters\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3 text-sm\">\n            <div className=\"flex justify-between py-2 border-b border-gray-100\">\n              <span className=\"font-medium\">Scale 1 (Plan/Elevation):</span>\n              <span className=\"font-mono text-gray-700\" data-testid=\"param-scale1\">\n                1:{parameters.scale1}\n              </span>\n            </div>\n            <div className=\"flex justify-between py-2 border-b border-gray-100\">\n              <span className=\"font-medium\">Scale 2 (Sections):</span>\n              <span className=\"font-mono text-gray-700\" data-testid=\"param-scale2\">\n                1:{parameters.scale2}\n              </span>\n            </div>\n            <div className=\"flex justify-between py-2 border-b border-gray-100\">\n              <span className=\"font-medium\">Skew Angle:</span>\n              <span className=\"font-mono text-gray-700\" data-testid=\"param-skew\">\n                {parameters.skew.toFixed(1)}°\n              </span>\n            </div>\n            <div className=\"flex justify-between py-2 border-b border-gray-100\">\n              <span className=\"font-medium\">Datum Level:</span>\n              <span className=\"font-mono text-gray-700\" data-testid=\"param-datum\">\n                {parameters.datum.toFixed(3)}m\n              </span>\n            </div>\n            <div className=\"flex justify-between py-2 border-b border-gray-100\">\n              <span className=\"font-medium\">Top RL:</span>\n              <span className=\"font-mono text-gray-700\" data-testid=\"param-toprl\">\n                {parameters.toprl.toFixed(3)}m\n              </span>\n            </div>\n            <div className=\"flex justify-between py-2 border-b border-gray-100\">\n              <span className=\"font-medium\">Chainage Range:</span>\n              <span className=\"font-mono text-gray-700\" data-testid=\"param-chainage-range\">\n                {formatChainage(parameters.left, parameters.right)}\n              </span>\n            </div>\n            <div className=\"flex justify-between py-2 border-b border-gray-100\">\n              <span className=\"font-medium\">X Increment:</span>\n              <span className=\"font-mono text-gray-700\" data-testid=\"param-xincr\">\n                {parameters.xincr.toFixed(1)}m\n              </span>\n            </div>\n            <div className=\"flex justify-between py-2 border-b border-gray-100\">\n              <span className=\"font-medium\">Y Increment:</span>\n              <span className=\"font-mono text-gray-700\" data-testid=\"param-yincr\">\n                {parameters.yincr.toFixed(1)}m\n              </span>\n            </div>\n            <div className=\"flex justify-between py-2\">\n              <span className=\"font-medium\">No. of Chainages:</span>\n              <span className=\"font-mono text-gray-700\" data-testid=\"param-noch\">\n                {parameters.noch}\n              </span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Calculator className=\"mr-2 h-5 w-5 text-primary\" />\n              Calculations\n            </div>\n            {isCalculating && (\n              <Badge variant=\"secondary\" className=\"animate-pulse\">\n                <Clock className=\"mr-1 h-3 w-3\" />\n                Processing\n              </Badge>\n            )}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center space-x-3 p-3 bg-green-50 rounded border border-green-200\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <span className=\"text-sm text-green-800\" data-testid=\"validation-status\">\n                Input validation: Complete\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-3 p-3 bg-green-50 rounded border border-green-200\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <span className=\"text-sm text-green-800\" data-testid=\"transformation-status\">\n                Coordinate transformation: Ready\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-3 p-3 bg-green-50 rounded border border-green-200\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <span className=\"text-sm text-green-800\" data-testid=\"elevation-status\">\n                Bridge elevation: Ready\n              </span>\n            </div>\n          </div>\n\n          {calculatedConstants && (\n            <div className=\"mt-4 p-3 bg-gray-50 rounded\">\n              <p className=\"text-xs font-medium text-gray-600 mb-2\">Calculated Constants:</p>\n              <div className=\"text-xs font-mono text-gray-700 space-y-1\">\n                <div className=\"flex justify-between\">\n                  <span>vvs (V scale factor):</span>\n                  <span className=\"text-gray-900\" data-testid=\"calc-vvs\">\n                    {calculatedConstants.vvs.toFixed(1)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>hhs (H scale factor):</span>\n                  <span className=\"text-gray-900\" data-testid=\"calc-hhs\">\n                    {calculatedConstants.hhs.toFixed(1)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>skew1 (radians):</span>\n                  <span className=\"text-gray-900\" data-testid=\"calc-skew1\">\n                    {calculatedConstants.skew1.toFixed(4)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>sc (scale ratio):</span>\n                  <span className=\"text-gray-900\" data-testid=\"calc-sc\">\n                    {calculatedConstants.sc.toFixed(2)}\n                  </span>\n                </div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7813},"attached_assets/parameter-editor_1755611337093.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Settings, Save, RotateCcw, Calculator } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { BridgeParameters } from \"@/lib/bridge-calculations\";\n\ninterface ParameterEditorProps {\n  parameters: BridgeParameters | null;\n  onParametersChange: (parameters: BridgeParameters) => void;\n  isCalculating?: boolean;\n}\n\nexport function ParameterEditor({ \n  parameters, \n  onParametersChange, \n  isCalculating = false \n}: ParameterEditorProps) {\n  const [editableParams, setEditableParams] = useState<BridgeParameters | null>(null);\n  const [hasChanges, setHasChanges] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (parameters) {\n      setEditableParams(parameters);\n      setHasChanges(false);\n    }\n  }, [parameters]);\n\n  const handleParameterChange = (field: keyof BridgeParameters, value: string) => {\n    if (!editableParams) return;\n\n    const numValue = field === 'noch' ? parseInt(value) || 0 : parseFloat(value) || 0;\n    const updated = { ...editableParams, [field]: numValue };\n    setEditableParams(updated);\n    setHasChanges(true);\n  };\n\n  const handleSave = () => {\n    if (!editableParams) return;\n\n    // Validate parameters\n    if (editableParams.scale1 <= 0 || editableParams.scale2 <= 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Scale values must be greater than 0\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (editableParams.left >= editableParams.right) {\n      toast({\n        title: \"Validation Error\", \n        description: \"Right chainage must be greater than left chainage\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (editableParams.datum >= editableParams.toprl) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Top RL must be greater than datum level\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    onParametersChange(editableParams);\n    setHasChanges(false);\n    toast({\n      title: \"Parameters Updated\",\n      description: \"Bridge drawing will refresh with new values\"\n    });\n  };\n\n  const handleReset = () => {\n    if (parameters) {\n      setEditableParams(parameters);\n      setHasChanges(false);\n    }\n  };\n\n  if (!editableParams) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Settings className=\"mr-2 h-5 w-5 text-primary\" />\n            Parameter Editor\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8 text-gray-500\">\n            <Settings className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n            <p>Upload an input file to enable parameter editing</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center\">\n            <Settings className=\"mr-2 h-5 w-5 text-primary\" />\n            Parameter Editor\n          </CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            {hasChanges && (\n              <Badge variant=\"secondary\" className=\"bg-orange-100 text-orange-800\">\n                Modified\n              </Badge>\n            )}\n            {isCalculating && (\n              <Badge variant=\"secondary\" className=\"animate-pulse\">\n                <Calculator className=\"mr-1 h-3 w-3\" />\n                Calculating\n              </Badge>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          {/* Scale Parameters */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"scale1\" className=\"text-sm font-medium\">\n                Scale 1 (Plan/Elevation)\n              </Label>\n              <Input\n                id=\"scale1\"\n                type=\"number\"\n                value={editableParams.scale1}\n                onChange={(e) => handleParameterChange('scale1', e.target.value)}\n                className=\"font-mono\"\n                data-testid=\"input-scale1\"\n              />\n              <p className=\"text-xs text-gray-500\">Drawing scale for plan and elevation views</p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"scale2\" className=\"text-sm font-medium\">\n                Scale 2 (Sections)\n              </Label>\n              <Input\n                id=\"scale2\"\n                type=\"number\"\n                value={editableParams.scale2}\n                onChange={(e) => handleParameterChange('scale2', e.target.value)}\n                className=\"font-mono\"\n                data-testid=\"input-scale2\"\n              />\n              <p className=\"text-xs text-gray-500\">Drawing scale for cross-sections</p>\n            </div>\n          </div>\n\n          {/* Geometry Parameters */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"skew\" className=\"text-sm font-medium\">\n                Skew Angle (degrees)\n              </Label>\n              <Input\n                id=\"skew\"\n                type=\"number\"\n                step=\"0.1\"\n                value={editableParams.skew}\n                onChange={(e) => handleParameterChange('skew', e.target.value)}\n                className=\"font-mono\"\n                data-testid=\"input-skew\"\n              />\n              <p className=\"text-xs text-gray-500\">Bridge skew angle in degrees</p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"noch\" className=\"text-sm font-medium\">\n                Number of Chainages\n              </Label>\n              <Input\n                id=\"noch\"\n                type=\"number\"\n                value={editableParams.noch}\n                onChange={(e) => handleParameterChange('noch', e.target.value)}\n                className=\"font-mono\"\n                data-testid=\"input-noch\"\n              />\n              <p className=\"text-xs text-gray-500\">Total number of chainage points</p>\n            </div>\n          </div>\n\n          {/* Level Parameters */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"datum\" className=\"text-sm font-medium\">\n                Datum Level (m)\n              </Label>\n              <Input\n                id=\"datum\"\n                type=\"number\"\n                step=\"0.001\"\n                value={editableParams.datum}\n                onChange={(e) => handleParameterChange('datum', e.target.value)}\n                className=\"font-mono\"\n                data-testid=\"input-datum\"\n              />\n              <p className=\"text-xs text-gray-500\">Reference datum level in meters</p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"toprl\" className=\"text-sm font-medium\">\n                Top RL (m)\n              </Label>\n              <Input\n                id=\"toprl\"\n                type=\"number\"\n                step=\"0.001\"\n                value={editableParams.toprl}\n                onChange={(e) => handleParameterChange('toprl', e.target.value)}\n                className=\"font-mono\"\n                data-testid=\"input-toprl\"\n              />\n              <p className=\"text-xs text-gray-500\">Top reduced level in meters</p>\n            </div>\n          </div>\n\n          {/* Chainage Parameters */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"left\" className=\"text-sm font-medium\">\n                Left Chainage (m)\n              </Label>\n              <Input\n                id=\"left\"\n                type=\"number\"\n                step=\"0.001\"\n                value={editableParams.left}\n                onChange={(e) => handleParameterChange('left', e.target.value)}\n                className=\"font-mono\"\n                data-testid=\"input-left\"\n              />\n              <p className=\"text-xs text-gray-500\">Start chainage of X-axis</p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"right\" className=\"text-sm font-medium\">\n                Right Chainage (m)\n              </Label>\n              <Input\n                id=\"right\"\n                type=\"number\"\n                step=\"0.001\"\n                value={editableParams.right}\n                onChange={(e) => handleParameterChange('right', e.target.value)}\n                className=\"font-mono\"\n                data-testid=\"input-right\"\n              />\n              <p className=\"text-xs text-gray-500\">End chainage of X-axis</p>\n            </div>\n          </div>\n\n          {/* Increment Parameters */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"xincr\" className=\"text-sm font-medium\">\n                X Increment (m)\n              </Label>\n              <Input\n                id=\"xincr\"\n                type=\"number\"\n                step=\"0.1\"\n                value={editableParams.xincr}\n                onChange={(e) => handleParameterChange('xincr', e.target.value)}\n                className=\"font-mono\"\n                data-testid=\"input-xincr\"\n              />\n              <p className=\"text-xs text-gray-500\">Distance interval on X-axis</p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"yincr\" className=\"text-sm font-medium\">\n                Y Increment (m)\n              </Label>\n              <Input\n                id=\"yincr\"\n                type=\"number\"\n                step=\"0.1\"\n                value={editableParams.yincr}\n                onChange={(e) => handleParameterChange('yincr', e.target.value)}\n                className=\"font-mono\"\n                data-testid=\"input-yincr\"\n              />\n              <p className=\"text-xs text-gray-500\">Level interval on Y-axis</p>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex items-center justify-between pt-4 border-t\">\n            <div className=\"text-sm text-gray-600\">\n              <span className=\"font-medium\">Bridge Length:</span> {(editableParams.right - editableParams.left).toFixed(1)}m\n              <span className=\"ml-4 font-medium\">Height Range:</span> {(editableParams.toprl - editableParams.datum).toFixed(1)}m\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleReset}\n                disabled={!hasChanges}\n                data-testid=\"reset-parameters-button\"\n              >\n                <RotateCcw className=\"mr-1 h-4 w-4\" />\n                Reset\n              </Button>\n              \n              <Button\n                onClick={handleSave}\n                disabled={!hasChanges || isCalculating}\n                data-testid=\"save-parameters-button\"\n              >\n                {isCalculating ? (\n                  <>\n                    <div className=\"animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                    Calculating...\n                  </>\n                ) : (\n                  <>\n                    <Save className=\"mr-1 h-4 w-4\" />\n                    Apply Changes\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n\n          {/* Calculated Values Display */}\n          <div className=\"bg-gray-50 rounded-lg p-3\">\n            <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Calculated Constants</h4>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 text-xs\">\n              <div>\n                <span className=\"text-gray-500\">vvs:</span>\n                <span className=\"ml-1 font-mono text-gray-900\">1000.0</span>\n              </div>\n              <div>\n                <span className=\"text-gray-500\">hhs:</span>\n                <span className=\"ml-1 font-mono text-gray-900\">1000.0</span>\n              </div>\n              <div>\n                <span className=\"text-gray-500\">skew1:</span>\n                <span className=\"ml-1 font-mono text-gray-900\">\n                  {(editableParams.skew * 0.0174532).toFixed(4)}\n                </span>\n              </div>\n              <div>\n                <span className=\"text-gray-500\">sc:</span>\n                <span className=\"ml-1 font-mono text-gray-900\">\n                  {(editableParams.scale1 / editableParams.scale2).toFixed(2)}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":13254},"attached_assets/postcss.config_1755609962680.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"attached_assets/postcss.config_1755611116264.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"attached_assets/postcss.config_1755611162783.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"attached_assets/progress-tracker_1755611337094.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { CheckCircle, Clock, AlertCircle } from \"lucide-react\";\n\ninterface ProgressStep {\n  id: number;\n  title: string;\n  completed: boolean;\n  active: boolean;\n  error?: boolean;\n}\n\ninterface ProgressTrackerProps {\n  status: 'uploaded' | 'processing' | 'completed' | 'error';\n  progress: number;\n  errorMessage?: string;\n}\n\nexport function ProgressTracker({ status, progress, errorMessage }: ProgressTrackerProps) {\n  const getSteps = (): ProgressStep[] => {\n    const baseSteps = [\n      { id: 1, title: \"File validation complete\", completed: progress >= 10, active: progress < 10 && status === 'processing' },\n      { id: 2, title: \"Processing bridge parameters\", completed: progress >= 30, active: progress >= 10 && progress < 30 && status === 'processing' },\n      { id: 3, title: \"Generating elevation views\", completed: progress >= 60, active: progress >= 30 && progress < 60 && status === 'processing' },\n      { id: 4, title: \"Creating DWG files\", completed: progress >= 80, active: progress >= 60 && progress < 80 && status === 'processing' },\n      { id: 5, title: \"Generating PDF output\", completed: progress >= 100, active: progress >= 80 && progress < 100 && status === 'processing' },\n    ];\n\n    if (status === 'error') {\n      return baseSteps.map(step => ({\n        ...step,\n        error: step.active,\n        active: false,\n      }));\n    }\n\n    return baseSteps;\n  };\n\n  const steps = getSteps();\n\n  return (\n    <Card className=\"w-full\">\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n          <Clock className=\"text-primary mr-2\" size={20} />\n          Generation Progress\n        </h3>\n        \n        <div className=\"space-y-4 mb-6\">\n          {steps.map((step) => (\n            <div key={step.id} className=\"flex items-center space-x-3\">\n              <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-medium ${\n                step.error \n                  ? \"bg-red-500 text-white\"\n                  : step.completed \n                    ? \"bg-green-500 text-white\" \n                    : step.active \n                      ? \"bg-primary text-white animate-pulse\" \n                      : \"bg-gray-200 text-gray-400\"\n              }`}>\n                {step.error ? (\n                  <AlertCircle size={12} />\n                ) : step.completed ? (\n                  <CheckCircle size={12} />\n                ) : (\n                  step.id\n                )}\n              </div>\n              <span className={`text-sm ${\n                step.error ? \"text-red-600\" : step.completed ? \"text-gray-700\" : \"text-gray-400\"\n              }`}>\n                {step.title}\n              </span>\n            </div>\n          ))}\n        </div>\n\n        <div>\n          <div className=\"flex justify-between text-sm text-gray-600 mb-2\">\n            <span>Overall Progress</span>\n            <span>{progress}%</span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <div \n              className={`h-2 rounded-full transition-all duration-300 ${\n                status === 'error' ? 'bg-red-500' : 'bg-primary'\n              }`}\n              style={{ width: `${progress}%` }}\n            />\n          </div>\n        </div>\n\n        {status === 'error' && errorMessage && (\n          <div className=\"mt-4 p-3 bg-red-50 border border-red-200 rounded-lg\">\n            <div className=\"flex items-center\">\n              <AlertCircle className=\"text-red-500 mr-2\" size={16} />\n              <p className=\"text-sm text-red-700\">{errorMessage}</p>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3762},"attached_assets/queryClient_1755611318411.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"attached_assets/replit_1755609962680.md":{"content":"# Bridge Drafter Application\n\n## Overview\n\nBridge Drafter is a specialized engineering application for creating, editing, and visualizing bridge cross-section drawings. The application is built as a full-stack web application with React frontend and Express backend, designed to replace traditional LISP-based AutoCAD workflows with a modern web interface. It supports importing engineering data from Excel files, interactive parameter adjustment, real-time drawing generation, and export capabilities for technical documentation.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React with TypeScript**: Modern component-based UI using functional components and hooks\n- **Vite Build System**: Fast development server with hot module replacement\n- **UI Component Library**: Radix UI primitives with shadcn/ui styling system\n- **Styling**: Tailwind CSS with CSS custom properties for theming\n- **State Management**: React Query for server state, local state with useState/useReducer\n- **Routing**: Wouter for lightweight client-side routing\n- **Canvas Rendering**: HTML5 Canvas API with custom drawing engine for technical drawings\n\n### Backend Architecture\n- **Express.js Server**: RESTful API with TypeScript\n- **Modular Storage Interface**: Abstracted storage layer supporting multiple implementations (currently in-memory, designed for future database integration)\n- **File Processing**: Multer for file uploads with XLSX parsing for Excel data import\n- **Route Organization**: Centralized route registration with proper error handling middleware\n- **Development Tooling**: Vite integration for development mode with HMR support\n\n### Data Architecture\n- **Drizzle ORM**: Type-safe database schema definition and migrations\n- **PostgreSQL**: Primary database (Neon serverless) with schema for projects and cross-section data\n- **Zod Validation**: Runtime type validation for API inputs and data parsing\n- **JSON Storage**: Complex engineering parameters stored as JSONB for flexibility\n- **In-Memory Fallback**: Development storage implementation for rapid prototyping\n\n### Drawing Engine\n- **Custom Canvas Engine**: Specialized drawing system for engineering diagrams\n- **Coordinate Transformation**: Mathematical conversion between engineering coordinates and canvas pixels\n- **View Types**: Support for elevation, plan, and section views with different scaling\n- **Interactive Features**: Zoom, pan, grid display, and dimension annotations\n- **Export Capabilities**: Image export and PDF generation for technical documentation\n\n### File Processing Pipeline\n- **Excel Import**: XLSX parsing with validation for engineering data formats\n- **Data Validation**: Multi-stage validation ensuring data integrity and engineering constraints\n- **Parameter Calculation**: Automatic derivation of dependent engineering values (scales, angles, ratios)\n- **Error Handling**: Comprehensive error reporting for invalid data formats or missing required fields\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18 with TypeScript, React Query for data fetching, React Hook Form for form management\n- **Build Tools**: Vite for bundling and development, ESBuild for production builds\n- **UI Libraries**: Radix UI for accessible primitives, Lucide React for icons, Tailwind CSS for styling\n\n### Backend Dependencies\n- **Express.js**: Web framework with middleware for CORS, body parsing, and file uploads\n- **Database Layer**: Drizzle ORM with PostgreSQL driver, Neon serverless database\n- **File Processing**: Multer for uploads, XLSX library for Excel parsing\n- **Development**: tsx for TypeScript execution, nodemon equivalent functionality\n\n### Specialized Libraries\n- **Engineering Calculations**: Custom mathematical functions for coordinate transformations and engineering formulas\n- **PDF Generation**: jsPDF for technical drawing exports\n- **Date Handling**: date-fns for timestamp management\n- **Validation**: Zod for schema validation and type safety\n\n### Development and Deployment\n- **Replit Integration**: Custom plugins for development environment and error overlay\n- **Session Management**: Connect-pg-simple for PostgreSQL session storage\n- **Environment Configuration**: Environment-based configuration for database connections and feature flags","size_bytes":4372},"attached_assets/replit_1755611116263.md":{"content":"# Bridge Drafter Application\n\n## Overview\n\nBridge Drafter is a specialized engineering application for creating, editing, and visualizing bridge cross-section drawings. The application is built as a full-stack web application with React frontend and Express backend, designed to replace traditional LISP-based AutoCAD workflows with a modern web interface. It supports importing engineering data from Excel files, interactive parameter adjustment, real-time drawing generation, and export capabilities for technical documentation.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React with TypeScript**: Modern component-based UI using functional components and hooks\n- **Vite Build System**: Fast development server with hot module replacement\n- **UI Component Library**: Radix UI primitives with shadcn/ui styling system\n- **Styling**: Tailwind CSS with CSS custom properties for theming\n- **State Management**: React Query for server state, local state with useState/useReducer\n- **Routing**: Wouter for lightweight client-side routing\n- **Canvas Rendering**: HTML5 Canvas API with custom drawing engine for technical drawings\n\n### Backend Architecture\n- **Express.js Server**: RESTful API with TypeScript\n- **Modular Storage Interface**: Abstracted storage layer supporting multiple implementations (currently in-memory, designed for future database integration)\n- **File Processing**: Multer for file uploads with XLSX parsing for Excel data import\n- **Route Organization**: Centralized route registration with proper error handling middleware\n- **Development Tooling**: Vite integration for development mode with HMR support\n\n### Data Architecture\n- **Drizzle ORM**: Type-safe database schema definition and migrations\n- **PostgreSQL**: Primary database (Neon serverless) with schema for projects and cross-section data\n- **Zod Validation**: Runtime type validation for API inputs and data parsing\n- **JSON Storage**: Complex engineering parameters stored as JSONB for flexibility\n- **In-Memory Fallback**: Development storage implementation for rapid prototyping\n\n### Drawing Engine\n- **Custom Canvas Engine**: Specialized drawing system for engineering diagrams\n- **Coordinate Transformation**: Mathematical conversion between engineering coordinates and canvas pixels\n- **View Types**: Support for elevation, plan, and section views with different scaling\n- **Interactive Features**: Zoom, pan, grid display, and dimension annotations\n- **Export Capabilities**: Image export and PDF generation for technical documentation\n\n### File Processing Pipeline\n- **Excel Import**: XLSX parsing with validation for engineering data formats\n- **Data Validation**: Multi-stage validation ensuring data integrity and engineering constraints\n- **Parameter Calculation**: Automatic derivation of dependent engineering values (scales, angles, ratios)\n- **Error Handling**: Comprehensive error reporting for invalid data formats or missing required fields\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18 with TypeScript, React Query for data fetching, React Hook Form for form management\n- **Build Tools**: Vite for bundling and development, ESBuild for production builds\n- **UI Libraries**: Radix UI for accessible primitives, Lucide React for icons, Tailwind CSS for styling\n\n### Backend Dependencies\n- **Express.js**: Web framework with middleware for CORS, body parsing, and file uploads\n- **Database Layer**: Drizzle ORM with PostgreSQL driver, Neon serverless database\n- **File Processing**: Multer for uploads, XLSX library for Excel parsing\n- **Development**: tsx for TypeScript execution, nodemon equivalent functionality\n\n### Specialized Libraries\n- **Engineering Calculations**: Custom mathematical functions for coordinate transformations and engineering formulas\n- **PDF Generation**: jsPDF for technical drawing exports\n- **Date Handling**: date-fns for timestamp management\n- **Validation**: Zod for schema validation and type safety\n\n### Development and Deployment\n- **Replit Integration**: Custom plugins for development environment and error overlay\n- **Session Management**: Connect-pg-simple for PostgreSQL session storage\n- **Environment Configuration**: Environment-based configuration for database connections and feature flags","size_bytes":4372},"attached_assets/replit_1755611162783.md":{"content":"# Bridge CAD Drawing Generator\n\n## Overview\n\nThis is a full-stack web application that generates technical bridge drawings from LISP-formatted input data. The system parses engineering parameters, performs bridge calculations, and produces CAD-style drawings suitable for construction documentation. Built as a modern React frontend with an Express.js backend, it digitizes the traditional bridge design workflow while maintaining engineering accuracy and professional drawing standards.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React with TypeScript**: Modern component-based UI using functional components and hooks\n- **Vite Build System**: Fast development server with hot module replacement and optimized production builds\n- **TanStack Query**: Server state management for API calls, caching, and background updates\n- **Wouter**: Lightweight client-side routing without the overhead of React Router\n- **shadcn/ui Components**: Consistent design system built on Radix UI primitives with Tailwind CSS styling\n\n### Backend Architecture\n- **Express.js REST API**: Node.js server handling file parsing, calculations, and drawing generation\n- **TypeScript**: Type safety across the entire backend codebase\n- **Modular Route Structure**: Clean separation of concerns with dedicated route handlers\n- **In-Memory Storage**: Simple storage implementation with interface for future database migration\n- **Error Handling**: Centralized error middleware with proper HTTP status codes\n\n### Data Processing Pipeline\n- **LISP Parser**: Converts traditional LISP-formatted engineering input files into structured data\n- **Bridge Calculator**: Implements mathematical formulas for coordinate transformations, skew adjustments, and layout calculations\n- **Drawing Generator**: Creates SVG-based technical drawings with proper scaling, dimensions, and annotations\n- **Parameter Validation**: Zod schema validation ensures engineering parameters meet required constraints\n\n### Database Design\n- **Drizzle ORM**: Type-safe database operations with PostgreSQL\n- **User Management**: Basic authentication and project ownership\n- **Project Storage**: Bridge parameters, cross-sections, and generated drawings\n- **Schema Versioning**: Migration system for database structure changes\n\n### File Processing Workflow\n1. Input file upload and validation\n2. LISP format parsing into structured parameters\n3. Engineering calculations (coordinate systems, transformations)\n4. Drawing generation with proper scaling and annotations\n5. Export capabilities (DWG, PDF, SVG formats)\n\n### UI Component Structure\n- **File Upload**: Drag-and-drop interface with validation\n- **Parameter Display**: Real-time visualization of parsed engineering data\n- **Bridge Canvas**: Interactive drawing viewer with zoom and pan capabilities\n- **Export Options**: Multiple format support with customizable settings\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React 18**: Frontend framework with modern hooks and concurrent features\n- **Express.js**: Backend web server framework\n- **TypeScript**: Type safety and developer experience\n- **Vite**: Build tool and development server\n\n### Database and ORM\n- **Drizzle ORM**: Type-safe database toolkit\n- **@neondatabase/serverless**: PostgreSQL connection for serverless environments\n- **Drizzle Kit**: Database migration and schema management tools\n\n### UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework\n- **Radix UI**: Accessible component primitives (@radix-ui/react-*)\n- **shadcn/ui**: Pre-built component library\n- **Lucide Icons**: Modern icon library\n- **class-variance-authority**: Component variant management\n\n### Data Management\n- **TanStack React Query**: Server state management and caching\n- **Zod**: Runtime type validation and schema definition\n- **React Hook Form**: Form state management with validation\n\n### Development Tools\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **TSX**: TypeScript execution for development\n- **PostCSS**: CSS processing and optimization\n\n### Engineering Libraries\n- **date-fns**: Date manipulation utilities\n- **CMDK**: Command palette component for advanced UI interactions","size_bytes":4258},"attached_assets/routes_1755609978417.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertProjectSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport multer from \"multer\";\nimport * as XLSX from \"xlsx\";\n\nconst upload = multer({ storage: multer.memoryStorage() });\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Get all projects\n  app.get(\"/api/projects\", async (req, res) => {\n    try {\n      const projects = await storage.getAllProjects();\n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch projects\" });\n    }\n  });\n\n  // Get project by ID\n  app.get(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const project = await storage.getProject(req.params.id);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch project\" });\n    }\n  });\n\n  // Create project\n  app.post(\"/api/projects\", async (req, res) => {\n    try {\n      const validatedData = insertProjectSchema.parse(req.body);\n      const project = await storage.createProject(validatedData);\n      res.status(201).json(project);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create project\" });\n    }\n  });\n\n  // Update project\n  app.patch(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const updates = insertProjectSchema.partial().parse(req.body);\n      const project = await storage.updateProject(req.params.id, updates);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update project\" });\n    }\n  });\n\n  // Delete project\n  app.delete(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteProject(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete project\" });\n    }\n  });\n\n  // Parse Excel file\n  app.post(\"/api/parse-excel\", upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file provided\" });\n      }\n\n      const workbook = XLSX.read(req.file.buffer, { type: 'buffer' });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n\n      // Parse engineering data from Excel\n      const parsedData = parseEngineeringData(data as any[][]);\n      \n      res.json(parsedData);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to parse Excel file\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\nfunction parseEngineeringData(data: any[][]): any {\n  // Implementation based on the LISP code structure\n  // This parses the Excel data in the same order as the LISP read functions\n  \n  let rowIndex = 0;\n  const result: any = {};\n\n  try {\n    // Read scale parameters\n    result.scale1 = parseFloat(data[rowIndex++]?.[0]) || 100;\n    result.scale2 = parseFloat(data[rowIndex++]?.[0]) || 50;\n    result.skew = parseFloat(data[rowIndex++]?.[0]) || 0;\n    result.datum = parseInt(data[rowIndex++]?.[0]) || 100;\n    result.toprl = parseInt(data[rowIndex++]?.[0]) || 105;\n    result.left = parseFloat(data[rowIndex++]?.[0]) || 0;\n    result.right = parseFloat(data[rowIndex++]?.[0]) || 50;\n    result.xincr = parseFloat(data[rowIndex++]?.[0]) || 5;\n    result.yincr = parseFloat(data[rowIndex++]?.[0]) || 1;\n    result.noch = parseInt(data[rowIndex++]?.[0]) || 11;\n\n    // Read cross-section data\n    result.crossSections = [];\n    for (let i = 0; i < result.noch && rowIndex < data.length - 1; i++) {\n      const x = parseFloat(data[rowIndex++]?.[0]) || 0;\n      const y = parseFloat(data[rowIndex++]?.[0]) || 0;\n      result.crossSections.push({ chainage: x, level: y });\n    }\n\n    // Calculate derived values (from LISP calculations)\n    result.hs = 1;\n    result.vs = 1;\n    result.vvs = 1000.0 / result.vs;\n    result.hhs = 1000.0 / result.hs;\n    result.skew1 = result.skew * 0.0174532; // Convert to radians\n    result.s = Math.sin(result.skew1);\n    result.c = Math.cos(result.skew1);\n    result.tn = result.s / result.c;\n    result.sc = result.scale1 / result.scale2;\n\n    return result;\n  } catch (error) {\n    throw new Error(\"Invalid Excel data format\");\n  }\n}\n","size_bytes":4948},"attached_assets/routes_1755611177327.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { bridgeInputSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Parse bridge input data from text file\n  app.post(\"/api/bridge/parse\", async (req, res) => {\n    try {\n      const { inputData } = req.body;\n      \n      if (!inputData || typeof inputData !== 'string') {\n        return res.status(400).json({ error: \"Input data is required and must be a string\" });\n      }\n\n      // Basic input size validation (10MB max)\n      if (inputData.length > 10 * 1024 * 1024) {\n        return res.status(413).json({ error: \"Input file is too large (max 10MB)\" });\n      }\n\n      // Parse the input data according to LISP format\n      const lines = inputData.trim().split('\\n').map(line => line.trim()).filter(line => line);\n      \n      if (lines.length < 10) {\n        return res.status(400).json({ error: \"Input file must contain at least 10 parameters\" });\n      }\n\n      // Parse and validate numeric parameters\n      const parseNumericParam = (value: string, name: string, isInt = false): number => {\n        const num = isInt ? parseInt(value, 10) : parseFloat(value);\n        if (isNaN(num) || (isInt && !Number.isInteger(num))) {\n          throw new Error(`Invalid ${name}: ${value}`);\n        }\n        return num;\n      };\n\n      const parameters = {\n        scale1: parseNumericParam(lines[0], 'scale1'),\n        scale2: parseNumericParam(lines[1], 'scale2'),\n        skew: parseNumericParam(lines[2], 'skew'),\n        datum: parseNumericParam(lines[3], 'datum'),\n        toprl: parseNumericParam(lines[4], 'toprl'),\n        left: parseNumericParam(lines[5], 'left'),\n        right: parseNumericParam(lines[6], 'right'),\n        xincr: parseNumericParam(lines[7], 'xincr'),\n        yincr: parseNumericParam(lines[8], 'yincr'),\n        noch: parseNumericParam(lines[9], 'noch', true)\n      };\n\n      // Validate parameter relationships\n      if (parameters.scale1 <= 0 || parameters.scale2 <= 0) {\n        throw new Error('Scale values must be positive');\n      }\n      \n      if (parameters.xincr <= 0 || parameters.yincr <= 0) {\n        throw new Error('Increment values must be positive');\n      }\n\n      if (parameters.noch <= 0 || !Number.isInteger(parameters.noch)) {\n        throw new Error('Number of chainages must be a positive integer');\n      }\n\n      if (parameters.right <= parameters.left) {\n        throw new Error('Right chainage must be greater than left chainage');\n      }\n\n      if (parameters.toprl <= parameters.datum) {\n        throw new Error('Top level must be greater than datum level');\n      }\n\n      // Parse cross-section data if present\n      const crossSections = [];\n      for (let i = 10; i < lines.length; i += 2) {\n        if (i + 1 < lines.length) {\n          const chainage = parseNumericParam(lines[i], 'chainage');\n          const level = parseNumericParam(lines[i + 1], 'level');\n          \n          if (chainage < parameters.left || chainage > parameters.right) {\n            throw new Error(`Chainage ${chainage} is outside the valid range [${parameters.left}, ${parameters.right}]`);\n          }\n          \n          crossSections.push({ chainage, level });\n        }\n      }\n\n      // Sort cross-sections by chainage\n      crossSections.sort((a, b) => a.chainage - b.chainage);\n\n      // Validate cross-sections cover the full range\n      if (crossSections.length > 0) {\n        if (crossSections[0].chainage > parameters.left || \n            crossSections[crossSections.length - 1].chainage < parameters.right) {\n          throw new Error('Cross-sections must cover the full chainage range');\n        }\n      }\n\n      // Validate parsed parameters against schema\n      const validatedInput = bridgeInputSchema.parse({\n        ...parameters,\n        crossSections: crossSections.length > 0 ? crossSections : undefined\n      });\n\n      res.json({ \n        success: true, \n        parameters: validatedInput,\n        calculatedValues: {\n          vvs: 1000.0,\n          hhs: 1000.0,\n          skew1: validatedInput.skew * (Math.PI / 180), // Convert to radians\n          sc: validatedInput.scale1 / validatedInput.scale2\n        }\n      });\n\n    } catch (error) {\n      console.error('Error parsing bridge input:', error);\n      \n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          error: \"Invalid input parameters\", \n          details: error.errors \n        });\n      }\n      \n      res.status(400).json({ \n        error: error instanceof Error ? error.message : \"Failed to parse input data\" \n      });\n    }\n  });\n\n  // Create new bridge project\n  app.post(\"/api/bridge/project\", async (req, res) => {\n    try {\n      const { name, inputData, parameters } = req.body;\n      \n      const project = await storage.createBridgeProject({\n        name,\n        inputData,\n        parameters: JSON.stringify(parameters)\n      });\n\n      // Create bridge parameters\n      await storage.createBridgeParameters({\n        projectId: project.id,\n        ...parameters\n      });\n\n      // Create cross-sections if provided\n      if (parameters.crossSections) {\n        for (let i = 0; i < parameters.crossSections.length; i++) {\n          const section = parameters.crossSections[i];\n          await storage.createBridgeCrossSection({\n            projectId: project.id,\n            chainage: section.chainage,\n            level: section.level,\n            sequence: i\n          });\n        }\n      }\n\n      res.json({ success: true, project });\n\n    } catch (error) {\n      console.error('Error creating bridge project:', error);\n      res.status(500).json({ error: \"Failed to create bridge project\" });\n    }\n  });\n\n  // Get bridge project with parameters\n  app.get(\"/api/bridge/project/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      const project = await storage.getBridgeProject(id);\n      if (!project) {\n        return res.status(404).json({ error: \"Project not found\" });\n      }\n\n      const parameters = await storage.getBridgeParameters(id);\n      const crossSections = await storage.getBridgeCrossSections(id);\n\n      res.json({\n        project: {\n          ...project,\n          parameters: parameters ? JSON.parse(project.parameters) : null\n        },\n        parameters,\n        crossSections\n      });\n\n    } catch (error) {\n      console.error('Error fetching bridge project:', error);\n      res.status(500).json({ error: \"Failed to fetch project\" });\n    }\n  });\n\n  // Generate LISP code\n  app.post(\"/api/bridge/generate-lisp\", async (req, res) => {\n    try {\n      const { parameters } = req.body;\n      \n      if (!parameters) {\n        return res.status(400).json({ error: \"Parameters are required\" });\n      }\n\n      const lispCode = generateLispCode(parameters);\n      \n      res.json({ \n        success: true, \n        lispCode,\n        timestamp: new Date().toISOString()\n      });\n\n    } catch (error) {\n      console.error('Error generating LISP code:', error);\n      res.status(500).json({ error: \"Failed to generate LISP code\" });\n    }\n  });\n\n  // Generate DWG export data\n  app.post(\"/api/bridge/export/dwg\", async (req, res) => {\n    try {\n      const { projectId, exportSettings } = req.body;\n      \n      const project = await storage.getBridgeProject(projectId);\n      if (!project) {\n        return res.status(404).json({ error: \"Project not found\" });\n      }\n\n      // Generate DWG content (in a real app, this would generate actual DWG binary)\n      const dwgGenerator = new DWGGenerator(project.parameters);\n      const dwgData = dwgGenerator.exportDWG({\n        paperSize: exportSettings.paperSize || \"A4\",\n        orientation: \"landscape\",\n        scale: parseFloat(exportSettings.drawingScale?.replace('1:', '') || '100'),\n        includeDimensions: exportSettings.includeDimensions !== false,\n        includeTitleBlock: exportSettings.includeTitleBlock !== false,\n        includeGrid: exportSettings.includeGrid === true\n      });\n\n      // Set headers for file download\n      const filename = `bridge_export_${new Date().toISOString().split('T')[0]}.dwg`;\n      res.setHeader('Content-Type', 'application/octet-stream');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      \n      // In a real implementation, you would stream the DWG binary here\n      // For now, we'll send the commands as text\n      res.send(dwgData.commands.join('\\n'));\n      \n    } catch (error) {\n      console.error('DWG export error:', error);\n      res.status(500).json({ error: \"Failed to generate DWG export\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Helper function to generate LISP code based on parameters\nfunction generateLispCode(parameters: any): string {\n  return `; Generated Bridge GAD LISP Code\n; Based on input parameters and LISP functions\n\n(defun main()\n  ; Initialize parameters from input\n  (setq scale1 ${parameters.scale1})\n  (setq scale2 ${parameters.scale2})\n  (setq skew ${parameters.skew})\n  (setq datum ${parameters.datum})\n  (setq toprl ${parameters.toprl})\n  (setq left ${parameters.left})\n  (setq right ${parameters.right})\n  (setq xincr ${parameters.xincr})\n  (setq yincr ${parameters.yincr})\n  (setq noch ${parameters.noch})\n  \n  ; Calculate transformation constants\n  (setq vvs 1000.0)\n  (setq hhs 1000.0)\n  (setq skew1 (* skew 0.0174532))\n  (setq sc (/ scale1 scale2))\n  \n  ; Set dimension style\n  (st)\n  \n  ; Generate layout\n  (layout)\n  \n  ; Draw bridge elevation\n  (draw-elevation)\n)\n\n; Position transformation functions as per original LISP\n(defun vpos(a)\n  (setq a (* vvs (- a datum)))\n  (setq a (+ datum a))\n)\n\n(defun hpos(a)\n  (setq a (* hhs (- a left)))\n  (setq a (+ left a))\n)\n\n(defun v2pos(a)\n  (setq a (* vvs (- a datum)))\n  (setq a (* sc a))\n  (setq a (+ datum a))\n)\n\n(defun h2pos(a)\n  (setq a (* hhs (- a left)))\n  (setq a (* sc a))\n  (setq a (+ left a))\n)\n\n; Set dimension style (from original st() function)\n(defun st()\n  (command \"-style\" \"Arial\" \"Arial\" \"\" \"\" \"\" \"\" \"\")\n  (command \"DIMASZ\" \"150\")\n  (command \"DIMDEC\" \"0\")\n  (command \"DIMEXE\" \"400\")\n  (command \"DIMEXO\" \"400\")\n  (command \"DIMLFAC\" \"1\")\n  (command \"DIMTXSTY\" \"Arial\")\n  (command \"DIMTXT\" \"400\")\n  (command \"DIMTAD\" \"0\")\n  (command \"DIMTIH\" \"1\")\n  (command \"-dimstyle\" \"save\" \"pmb100\" \"y\")\n)\n\n; Layout generation (from original layout() function)\n(defun layout()\n  (setq os (getvar \"OSMODE\"))\n  (setvar \"OSMODE\" 0)\n  (setq left (- left (rem left 1.0)))\n  (setq pta1 (list left datum))\n  (setq d1 20)\n  (setq ptb1 (list left (- datum (* d1 scale1))))\n  (setq pta2 (list (hpos right) datum))\n  (setq ptb2 (list (hpos right) (- datum (* d1 scale1))))\n  (setq ptc1 (list left (- datum (* d1 scale1 2))))\n  (setq ptc2 (list (hpos right) (- datum (* d1 scale1 2))))\n  (setq ptd1 (list left (vpos toprl)))\n  \n  ; Draw axes\n  (COMMAND \"line\" pta1 pta2 \"\")\n  (COMMAND \"line\" ptb1 ptb2 \"\")\n  (COMMAND \"line\" ptc1 ptc2 \"\")\n  (COMMAND \"line\" ptc1 ptd1 \"\")\n  \n  ; Add labels\n  (setq ptb3 (list (- left (* 25 scale1)) (- datum (* d1 0.5 scale1))))\n  (command \"text\" ptb3 (* 2.5 scale1) 0 \"BED LEVEL\")\n  (setq ptb3 (list (- left (* 25 scale1)) (- datum (* d1 1.5 scale1))))\n  (command \"text\" ptb3 (* 2.5 scale1) 0 \"CHAINAGE\")\n)\n\n; Execute main function\n(main)`;\n}\n\n// Helper function to generate drawing commands\nfunction generateDrawingCommands(parameters: any): string[] {\n  const commands = [];\n  \n  // Basic drawing setup\n  commands.push(\"NEW\");\n  commands.push(\"UNITS 4 2 1 4 0 N\");\n  commands.push(\"LIMITS 0,0 420,297\"); // A3 landscape in mm\n  \n  // Set up layers\n  commands.push(\"LAYER N AXIS C 2 AXIS\");\n  commands.push(\"LAYER N BRIDGE C 1 BRIDGE\");\n  commands.push(\"LAYER N DIMENSIONS C 3 DIMENSIONS\");\n  \n  // Draw coordinate system\n  const leftMM = parameters.left * 1000;\n  const rightMM = parameters.right * 1000;\n  const datumMM = parameters.datum * 10; // Scale for drawing\n  \n  commands.push(`LINE ${leftMM},${datumMM} ${rightMM},${datumMM}`);\n  commands.push(`LINE ${leftMM},${datumMM} ${leftMM},${datumMM + (parameters.toprl - parameters.datum) * 10}`);\n  \n  return commands;\n}\n\nclass DWGGenerator {\n  constructor(parameters: any) {\n    this.parameters = parameters;\n  }\n\n  exportDWG(options: any) {\n    const commands = generateDrawingCommands(this.parameters);\n    // Add more commands based on options\n    return { commands };\n  }\n}\n","size_bytes":12476},"attached_assets/schema_1755609970009.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, real, integer, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  parameters: jsonb(\"parameters\").notNull(),\n  crossSectionData: jsonb(\"cross_section_data\").notNull().default('[]'),\n  createdAt: text(\"created_at\").default(sql`now()`),\n  updatedAt: text(\"updated_at\").default(sql`now()`)\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).pick({\n  name: true,\n  description: true,\n  parameters: true,\n  crossSectionData: true,\n});\n\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type Project = typeof projects.$inferSelect;\n","size_bytes":877},"attached_assets/schema_1755611168636.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, real, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const bridgeProjects = pgTable(\"bridge_projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  inputData: text(\"input_data\").notNull(),\n  parameters: text(\"parameters\").notNull(), // JSON string of bridge parameters\n  generatedDrawing: text(\"generated_drawing\"), // SVG or drawing data\n  createdAt: text(\"created_at\").default(sql`now()`),\n});\n\nexport const bridgeParameters = pgTable(\"bridge_parameters\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").references(() => bridgeProjects.id),\n  scale1: real(\"scale1\").notNull(), // scale for plan and elevation\n  scale2: real(\"scale2\").notNull(), // scale for sections\n  skew: real(\"skew\").notNull(), // skew angle in degrees\n  datum: real(\"datum\").notNull(), // datum level\n  toprl: real(\"toprl\").notNull(), // top level on Y axis\n  left: real(\"left\").notNull(), // start chainage of X axis\n  right: real(\"right\").notNull(), // end chainage of X axis\n  xincr: real(\"xincr\").notNull(), // interval of distances on X axis\n  yincr: real(\"yincr\").notNull(), // interval of levels on Y axis\n  noch: integer(\"noch\").notNull(), // total number of chainages\n});\n\nexport const bridgeCrossSections = pgTable(\"bridge_cross_sections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").references(() => bridgeProjects.id),\n  chainage: real(\"chainage\").notNull(),\n  level: real(\"level\").notNull(),\n  sequence: integer(\"sequence\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertBridgeProjectSchema = createInsertSchema(bridgeProjects).pick({\n  name: true,\n  inputData: true,\n  parameters: true,\n});\n\nexport const insertBridgeParametersSchema = createInsertSchema(bridgeParameters).omit({\n  id: true,\n  projectId: true,\n});\n\nexport const insertBridgeCrossSectionSchema = createInsertSchema(bridgeCrossSections).omit({\n  id: true,\n  projectId: true,\n});\n\n// Input file parsing schema\nexport const bridgeInputSchema = z.object({\n  scale1: z.number().positive(),\n  scale2: z.number().positive(),\n  skew: z.number(),\n  datum: z.number(),\n  toprl: z.number(),\n  left: z.number(),\n  right: z.number(),\n  xincr: z.number().positive(),\n  yincr: z.number().positive(),\n  noch: z.number().int().positive(),\n  crossSections: z.array(z.object({\n    chainage: z.number(),\n    level: z.number()\n  })).optional()\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertBridgeProject = z.infer<typeof insertBridgeProjectSchema>;\nexport type BridgeProject = typeof bridgeProjects.$inferSelect;\nexport type InsertBridgeParameters = z.infer<typeof insertBridgeParametersSchema>;\nexport type BridgeParameters = typeof bridgeParameters.$inferSelect;\nexport type InsertBridgeCrossSection = z.infer<typeof insertBridgeCrossSectionSchema>;\nexport type BridgeCrossSection = typeof bridgeCrossSections.$inferSelect;\nexport type BridgeInput = z.infer<typeof bridgeInputSchema>;\n","size_bytes":3575},"attached_assets/storage_1755609978418.ts":{"content":"import { type Project, type InsertProject } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getProject(id: string): Promise<Project | undefined>;\n  getAllProjects(): Promise<Project[]>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, updates: Partial<InsertProject>): Promise<Project | undefined>;\n  deleteProject(id: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private projects: Map<string, Project>;\n\n  constructor() {\n    this.projects = new Map();\n  }\n\n  async getProject(id: string): Promise<Project | undefined> {\n    return this.projects.get(id);\n  }\n\n  async getAllProjects(): Promise<Project[]> {\n    return Array.from(this.projects.values());\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const id = randomUUID();\n    const now = new Date().toISOString();\n    const project: Project = { \n      id, \n      name: insertProject.name,\n      description: insertProject.description || null,\n      parameters: insertProject.parameters,\n      crossSectionData: insertProject.crossSectionData,\n      createdAt: now,\n      updatedAt: now \n    };\n    this.projects.set(id, project);\n    return project;\n  }\n\n  async updateProject(id: string, updates: Partial<InsertProject>): Promise<Project | undefined> {\n    const existing = this.projects.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Project = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date().toISOString()\n    };\n    this.projects.set(id, updated);\n    return updated;\n  }\n\n  async deleteProject(id: string): Promise<boolean> {\n    return this.projects.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1760},"attached_assets/storage_1755611177327.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type BridgeProject, \n  type InsertBridgeProject,\n  type BridgeParameters,\n  type InsertBridgeParameters,\n  type BridgeCrossSection,\n  type InsertBridgeCrossSection\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  createBridgeProject(project: InsertBridgeProject): Promise<BridgeProject>;\n  getBridgeProject(id: string): Promise<BridgeProject | undefined>;\n  getUserBridgeProjects(userId: string): Promise<BridgeProject[]>;\n  updateBridgeProject(id: string, updates: Partial<BridgeProject>): Promise<BridgeProject | undefined>;\n  \n  createBridgeParameters(params: InsertBridgeParameters & { projectId: string }): Promise<BridgeParameters>;\n  getBridgeParameters(projectId: string): Promise<BridgeParameters | undefined>;\n  \n  createBridgeCrossSection(section: InsertBridgeCrossSection & { projectId: string }): Promise<BridgeCrossSection>;\n  getBridgeCrossSections(projectId: string): Promise<BridgeCrossSection[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private bridgeProjects: Map<string, BridgeProject>;\n  private bridgeParameters: Map<string, BridgeParameters>;\n  private bridgeCrossSections: Map<string, BridgeCrossSection[]>;\n\n  constructor() {\n    this.users = new Map();\n    this.bridgeProjects = new Map();\n    this.bridgeParameters = new Map();\n    this.bridgeCrossSections = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createBridgeProject(insertProject: InsertBridgeProject): Promise<BridgeProject> {\n    const id = randomUUID();\n    const project: BridgeProject = {\n      ...insertProject,\n      id,\n      userId: null,\n      generatedDrawing: null,\n      createdAt: new Date().toISOString(),\n    };\n    this.bridgeProjects.set(id, project);\n    return project;\n  }\n\n  async getBridgeProject(id: string): Promise<BridgeProject | undefined> {\n    return this.bridgeProjects.get(id);\n  }\n\n  async getUserBridgeProjects(userId: string): Promise<BridgeProject[]> {\n    return Array.from(this.bridgeProjects.values()).filter(\n      (project) => project.userId === userId\n    );\n  }\n\n  async updateBridgeProject(id: string, updates: Partial<BridgeProject>): Promise<BridgeProject | undefined> {\n    const existing = this.bridgeProjects.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...updates };\n    this.bridgeProjects.set(id, updated);\n    return updated;\n  }\n\n  async createBridgeParameters(params: InsertBridgeParameters & { projectId: string }): Promise<BridgeParameters> {\n    const id = randomUUID();\n    const parameters: BridgeParameters = { ...params, id };\n    this.bridgeParameters.set(params.projectId, parameters);\n    return parameters;\n  }\n\n  async getBridgeParameters(projectId: string): Promise<BridgeParameters | undefined> {\n    return this.bridgeParameters.get(projectId);\n  }\n\n  async createBridgeCrossSection(section: InsertBridgeCrossSection & { projectId: string }): Promise<BridgeCrossSection> {\n    const id = randomUUID();\n    const crossSection: BridgeCrossSection = { ...section, id };\n    \n    const existing = this.bridgeCrossSections.get(section.projectId) || [];\n    existing.push(crossSection);\n    this.bridgeCrossSections.set(section.projectId, existing);\n    \n    return crossSection;\n  }\n\n  async getBridgeCrossSections(projectId: string): Promise<BridgeCrossSection[]> {\n    return this.bridgeCrossSections.get(projectId) || [];\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":4104},"attached_assets/tailwind.config_1755609962680.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        success: \"var(--success)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2801},"attached_assets/tailwind.config_1755611116264.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        success: \"var(--success)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2801},"attached_assets/tailwind.config_1755611162783.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"attached_assets/types_1755611318411.ts":{"content":"export interface UploadResponse {\n  success: boolean;\n  project?: {\n    id: string;\n    fileName: string;\n    fileSize: string;\n    parameters: any;\n  };\n  error?: string;\n}\n\nexport interface GenerationResponse {\n  success: boolean;\n  message?: string;\n  error?: string;\n}\n\nexport interface ProjectStatus {\n  id: string;\n  fileName: string;\n  fileSize: string;\n  parameters: any;\n  status: 'uploaded' | 'processing' | 'completed' | 'error';\n  progress: string;\n  dwgFilePath?: string | null;\n  pdfFilePath?: string | null;\n  lispFilePath?: string | null;\n  errorMessage?: string | null;\n  createdAt: string;\n  updatedAt: string;\n}\n","size_bytes":631},"attached_assets/use-mobile_1755611326122.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"attached_assets/use-toast_1755611326123.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3890},"attached_assets/utils_1755611318411.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"attached_assets/vite.config_1755609962681.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/vite.config_1755611116264.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/vite.config_1755611162784.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/vite_1755609978418.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"attached_assets/vite_1755611177327.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  batchUploadSchema, \n  bridgeInputSchema, \n  insertBridgeProjectSchema,\n  insertBridgeParametersSchema,\n  insertBridgeCrossSectionSchema,\n  type BatchUpload,\n  type BridgeInput \n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Existing bridge project routes\n  app.get(\"/api/bridge/projects\", async (req, res) => {\n    try {\n      // For now, return all projects. In a real app, filter by user\n      const projects = await storage.getUserBridgeProjects(\"dummy-user\");\n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.post(\"/api/bridge/projects\", async (req, res) => {\n    try {\n      const data = insertBridgeProjectSchema.parse(req.body);\n      const project = await storage.createBridgeProject(data);\n      res.json(project);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid project data\" });\n    }\n  });\n\n  // New batch processing routes\n  app.post(\"/api/bridge/batch-upload\", async (req, res) => {\n    try {\n      const data = batchUploadSchema.parse(req.body);\n      \n      // Create batch job\n      const batchJob = await storage.createBatchJob({\n        name: `Batch Job ${new Date().toISOString()}`,\n        status: \"pending\",\n        totalFiles: data.files.length,\n        processedFiles: 0,\n        failedFiles: 0,\n        userId: \"dummy-user\" // In real app, get from session\n      });\n\n      // Process each file and create batch job files\n      const jobFiles = [];\n      for (const file of data.files) {\n        try {\n          // Parse and validate bridge input data\n          const parsedData = parseBridgeInputFile(file.content);\n          const validatedData = bridgeInputSchema.parse(parsedData);\n          \n          // Create bridge project\n          const project = await storage.createBridgeProject({\n            name: file.name.replace('.txt', ''),\n            inputData: file.content,\n            parameters: JSON.stringify(validatedData)\n          });\n\n          // Create batch job file entry\n          const jobFile = await storage.createBatchJobFile({\n            fileName: file.name,\n            fileSize: file.size,\n            status: \"pending\",\n            progress: 0,\n            currentStep: \"Queued for processing\",\n            estimatedTime: 180, // 3 minutes estimate\n            batchJobId: batchJob.id,\n            projectId: project.id\n          });\n\n          jobFiles.push(jobFile);\n\n        } catch (error) {\n          // Create failed job file entry\n          const jobFile = await storage.createBatchJobFile({\n            fileName: file.name,\n            fileSize: file.size,\n            status: \"failed\",\n            progress: 0,\n            currentStep: \"Validation failed\",\n            errorMessage: error instanceof Error ? error.message : \"Unknown error\",\n            batchJobId: batchJob.id\n          });\n\n          await storage.updateBatchJob(batchJob.id, {\n            failedFiles: batchJob.failedFiles + 1\n          });\n\n          jobFiles.push(jobFile);\n        }\n      }\n\n      // Start processing queue (in real app, this would be async)\n      processBatchJobAsync(batchJob.id);\n\n      res.json({\n        batchJob,\n        jobFiles,\n        success: true\n      });\n\n    } catch (error) {\n      console.error(\"Batch upload error:\", error);\n      res.status(400).json({ error: \"Invalid batch upload data\" });\n    }\n  });\n\n  app.get(\"/api/bridge/batch-jobs\", async (req, res) => {\n    try {\n      const jobs = await storage.getUserBatchJobs(\"dummy-user\");\n      res.json(jobs);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch batch jobs\" });\n    }\n  });\n\n  app.get(\"/api/bridge/batch-jobs/:id\", async (req, res) => {\n    try {\n      const job = await storage.getBatchJob(req.params.id);\n      if (!job) {\n        return res.status(404).json({ error: \"Batch job not found\" });\n      }\n      const files = await storage.getBatchJobFiles(job.id);\n      res.json({ job, files });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch batch job\" });\n    }\n  });\n\n  app.post(\"/api/bridge/batch-jobs/:id/process\", async (req, res) => {\n    try {\n      const job = await storage.getBatchJob(req.params.id);\n      if (!job) {\n        return res.status(404).json({ error: \"Batch job not found\" });\n      }\n\n      if (job.status !== \"pending\") {\n        return res.status(400).json({ error: \"Job is not in pending status\" });\n      }\n\n      // Update job status\n      await storage.updateBatchJob(job.id, { status: \"processing\" });\n      \n      // Start processing\n      processBatchJobAsync(job.id);\n\n      res.json({ success: true, message: \"Batch processing started\" });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to start batch processing\" });\n    }\n  });\n\n  app.get(\"/api/bridge/batch-jobs/:id/export\", async (req, res) => {\n    try {\n      const job = await storage.getBatchJob(req.params.id);\n      if (!job) {\n        return res.status(404).json({ error: \"Batch job not found\" });\n      }\n\n      const files = await storage.getBatchJobFiles(job.id);\n      const completedFiles = files.filter(f => f.status === \"completed\");\n\n      // In a real implementation, this would generate actual files\n      const exportData = {\n        jobId: job.id,\n        jobName: job.name,\n        totalFiles: completedFiles.length,\n        formats: {\n          dwg: completedFiles.length,\n          pdf: completedFiles.length,\n          lisp: completedFiles.length\n        },\n        downloadUrl: `/api/bridge/download/${job.id}`,\n        totalSize: completedFiles.reduce((sum, f) => sum + f.fileSize, 0) * 3 // 3 formats\n      };\n\n      res.json(exportData);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to prepare export\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Helper function to parse bridge input file\nfunction parseBridgeInputFile(content: string): BridgeInput {\n  const lines = content.split('\\n').map(line => line.trim()).filter(line => line.length > 0);\n  \n  if (lines.length < 10) {\n    throw new Error(\"Invalid file format: insufficient data\");\n  }\n\n  try {\n    const scale1 = parseFloat(lines[0]);\n    const scale2 = parseFloat(lines[1]);\n    const skew = parseFloat(lines[2]);\n    const datum = parseFloat(lines[3]);\n    const toprl = parseFloat(lines[4]);\n    const left = parseFloat(lines[5]);\n    const right = parseFloat(lines[6]);\n    const xincr = parseFloat(lines[7]);\n    const yincr = parseFloat(lines[8]);\n    const noch = parseInt(lines[9]);\n\n    const crossSections = [];\n    for (let i = 10; i < lines.length; i += 2) {\n      if (i + 1 < lines.length) {\n        crossSections.push({\n          chainage: parseFloat(lines[i]),\n          level: parseFloat(lines[i + 1])\n        });\n      }\n    }\n\n    return {\n      scale1,\n      scale2,\n      skew,\n      datum,\n      toprl,\n      left,\n      right,\n      xincr,\n      yincr,\n      noch,\n      crossSections\n    };\n  } catch (error) {\n    throw new Error(\"Invalid file format: failed to parse numeric values\");\n  }\n}\n\n// Async processing simulation (in real app, this would use a proper job queue)\nasync function processBatchJobAsync(jobId: string) {\n  const job = await storage.getBatchJob(jobId);\n  if (!job) return;\n\n  const files = await storage.getBatchJobFiles(jobId);\n  const pendingFiles = files.filter(f => f.status === \"pending\");\n\n  for (const file of pendingFiles) {\n    try {\n      // Update to processing\n      await storage.updateBatchJobFile(file.id, {\n        status: \"processing\",\n        progress: 0,\n        currentStep: \"Parsing bridge parameters\",\n        startedAt: new Date().toISOString()\n      });\n\n      // Simulate processing steps\n      const steps = [\n        { step: \"Parsing bridge parameters\", progress: 20, delay: 1000 },\n        { step: \"Calculating coordinates\", progress: 40, delay: 1500 },\n        { step: \"Generating plan view\", progress: 60, delay: 2000 },\n        { step: \"Generating elevation views\", progress: 80, delay: 1500 },\n        { step: \"Exporting files\", progress: 100, delay: 1000 }\n      ];\n\n      for (const { step, progress, delay } of steps) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n        await storage.updateBatchJobFile(file.id, {\n          currentStep: step,\n          progress\n        });\n      }\n\n      // Mark as completed\n      await storage.updateBatchJobFile(file.id, {\n        status: \"completed\",\n        progress: 100,\n        currentStep: \"Generation completed\",\n        completedAt: new Date().toISOString()\n      });\n\n      // Update job progress\n      const updatedFiles = await storage.getBatchJobFiles(jobId);\n      const processedCount = updatedFiles.filter(f => f.status === \"completed\" || f.status === \"failed\").length;\n      \n      await storage.updateBatchJob(jobId, {\n        processedFiles: processedCount\n      });\n\n    } catch (error) {\n      // Mark as failed\n      await storage.updateBatchJobFile(file.id, {\n        status: \"failed\",\n        errorMessage: error instanceof Error ? error.message : \"Unknown error\",\n        completedAt: new Date().toISOString()\n      });\n\n      const updatedJob = await storage.getBatchJob(jobId);\n      if (updatedJob) {\n        await storage.updateBatchJob(jobId, {\n          failedFiles: updatedJob.failedFiles + 1\n        });\n      }\n    }\n  }\n\n  // Mark job as completed\n  const finalFiles = await storage.getBatchJobFiles(jobId);\n  const allCompleted = finalFiles.every(f => f.status === \"completed\" || f.status === \"failed\");\n  \n  if (allCompleted) {\n    await storage.updateBatchJob(jobId, {\n      status: \"completed\",\n      completedAt: new Date().toISOString()\n    });\n  }\n}\n","size_bytes":9895},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type BridgeProject, \n  type InsertBridgeProject,\n  type BridgeParameters,\n  type InsertBridgeParameters,\n  type BridgeCrossSection,\n  type InsertBridgeCrossSection,\n  type BatchJob,\n  type InsertBatchJob,\n  type BatchJobFile,\n  type InsertBatchJobFile\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  createBridgeProject(project: InsertBridgeProject): Promise<BridgeProject>;\n  getBridgeProject(id: string): Promise<BridgeProject | undefined>;\n  getUserBridgeProjects(userId: string): Promise<BridgeProject[]>;\n  updateBridgeProject(id: string, updates: Partial<BridgeProject>): Promise<BridgeProject | undefined>;\n  \n  createBridgeParameters(params: InsertBridgeParameters & { projectId: string }): Promise<BridgeParameters>;\n  getBridgeParameters(projectId: string): Promise<BridgeParameters | undefined>;\n  \n  createBridgeCrossSection(section: InsertBridgeCrossSection & { projectId: string }): Promise<BridgeCrossSection>;\n  getBridgeCrossSections(projectId: string): Promise<BridgeCrossSection[]>;\n  \n  // Batch processing methods\n  createBatchJob(job: InsertBatchJob & { userId: string }): Promise<BatchJob>;\n  getBatchJob(id: string): Promise<BatchJob | undefined>;\n  getUserBatchJobs(userId: string): Promise<BatchJob[]>;\n  updateBatchJob(id: string, updates: Partial<BatchJob>): Promise<BatchJob | undefined>;\n  \n  createBatchJobFile(file: InsertBatchJobFile & { batchJobId: string, projectId?: string }): Promise<BatchJobFile>;\n  getBatchJobFiles(batchJobId: string): Promise<BatchJobFile[]>;\n  updateBatchJobFile(id: string, updates: Partial<BatchJobFile>): Promise<BatchJobFile | undefined>;\n  getBatchJobFile(id: string): Promise<BatchJobFile | undefined>;\n  \n  getAllActiveBatchJobs(): Promise<BatchJob[]>;\n  getProcessingBatchJobFiles(): Promise<BatchJobFile[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private bridgeProjects: Map<string, BridgeProject>;\n  private bridgeParameters: Map<string, BridgeParameters>;\n  private bridgeCrossSections: Map<string, BridgeCrossSection[]>;\n  private batchJobs: Map<string, BatchJob>;\n  private batchJobFiles: Map<string, BatchJobFile>;\n\n  constructor() {\n    this.users = new Map();\n    this.bridgeProjects = new Map();\n    this.bridgeParameters = new Map();\n    this.bridgeCrossSections = new Map();\n    this.batchJobs = new Map();\n    this.batchJobFiles = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createBridgeProject(insertProject: InsertBridgeProject): Promise<BridgeProject> {\n    const id = randomUUID();\n    const project: BridgeProject = {\n      ...insertProject,\n      id,\n      userId: null,\n      generatedDrawing: null,\n      createdAt: new Date().toISOString(),\n    };\n    this.bridgeProjects.set(id, project);\n    return project;\n  }\n\n  async getBridgeProject(id: string): Promise<BridgeProject | undefined> {\n    return this.bridgeProjects.get(id);\n  }\n\n  async getUserBridgeProjects(userId: string): Promise<BridgeProject[]> {\n    return Array.from(this.bridgeProjects.values()).filter(\n      (project) => project.userId === userId\n    );\n  }\n\n  async updateBridgeProject(id: string, updates: Partial<BridgeProject>): Promise<BridgeProject | undefined> {\n    const existing = this.bridgeProjects.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...updates };\n    this.bridgeProjects.set(id, updated);\n    return updated;\n  }\n\n  async createBridgeParameters(params: InsertBridgeParameters & { projectId: string }): Promise<BridgeParameters> {\n    const id = randomUUID();\n    const parameters: BridgeParameters = { ...params, id };\n    this.bridgeParameters.set(params.projectId, parameters);\n    return parameters;\n  }\n\n  async getBridgeParameters(projectId: string): Promise<BridgeParameters | undefined> {\n    return this.bridgeParameters.get(projectId);\n  }\n\n  async createBridgeCrossSection(section: InsertBridgeCrossSection & { projectId: string }): Promise<BridgeCrossSection> {\n    const id = randomUUID();\n    const crossSection: BridgeCrossSection = { ...section, id };\n    \n    const existing = this.bridgeCrossSections.get(section.projectId) || [];\n    existing.push(crossSection);\n    this.bridgeCrossSections.set(section.projectId, existing);\n    \n    return crossSection;\n  }\n\n  async getBridgeCrossSections(projectId: string): Promise<BridgeCrossSection[]> {\n    return this.bridgeCrossSections.get(projectId) || [];\n  }\n\n  async createBatchJob(job: InsertBatchJob & { userId: string }): Promise<BatchJob> {\n    const id = randomUUID();\n    const batchJob: BatchJob = {\n      ...job,\n      id,\n      createdAt: new Date().toISOString(),\n      completedAt: null,\n    };\n    this.batchJobs.set(id, batchJob);\n    return batchJob;\n  }\n\n  async getBatchJob(id: string): Promise<BatchJob | undefined> {\n    return this.batchJobs.get(id);\n  }\n\n  async getUserBatchJobs(userId: string): Promise<BatchJob[]> {\n    return Array.from(this.batchJobs.values()).filter(\n      (job) => job.userId === userId\n    );\n  }\n\n  async updateBatchJob(id: string, updates: Partial<BatchJob>): Promise<BatchJob | undefined> {\n    const existing = this.batchJobs.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...updates };\n    this.batchJobs.set(id, updated);\n    return updated;\n  }\n\n  async createBatchJobFile(file: InsertBatchJobFile & { batchJobId: string, projectId?: string }): Promise<BatchJobFile> {\n    const id = randomUUID();\n    const batchJobFile: BatchJobFile = {\n      ...file,\n      id,\n      startedAt: null,\n      completedAt: null,\n    };\n    this.batchJobFiles.set(id, batchJobFile);\n    return batchJobFile;\n  }\n\n  async getBatchJobFiles(batchJobId: string): Promise<BatchJobFile[]> {\n    return Array.from(this.batchJobFiles.values()).filter(\n      (file) => file.batchJobId === batchJobId\n    );\n  }\n\n  async updateBatchJobFile(id: string, updates: Partial<BatchJobFile>): Promise<BatchJobFile | undefined> {\n    const existing = this.batchJobFiles.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...updates };\n    this.batchJobFiles.set(id, updated);\n    return updated;\n  }\n\n  async getBatchJobFile(id: string): Promise<BatchJobFile | undefined> {\n    return this.batchJobFiles.get(id);\n  }\n\n  async getAllActiveBatchJobs(): Promise<BatchJob[]> {\n    return Array.from(this.batchJobs.values()).filter(\n      (job) => job.status === 'pending' || job.status === 'processing'\n    );\n  }\n\n  async getProcessingBatchJobFiles(): Promise<BatchJobFile[]> {\n    return Array.from(this.batchJobFiles.values()).filter(\n      (file) => file.status === 'processing'\n    );\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":7352},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, real, integer, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const bridgeProjects = pgTable(\"bridge_projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  inputData: text(\"input_data\").notNull(),\n  parameters: text(\"parameters\").notNull(), // JSON string of bridge parameters\n  generatedDrawing: text(\"generated_drawing\"), // SVG or drawing data\n  createdAt: text(\"created_at\").default(sql`now()`),\n});\n\nexport const bridgeParameters = pgTable(\"bridge_parameters\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").references(() => bridgeProjects.id),\n  scale1: real(\"scale1\").notNull(), // scale for plan and elevation\n  scale2: real(\"scale2\").notNull(), // scale for sections\n  skew: real(\"skew\").notNull(), // skew angle in degrees\n  datum: real(\"datum\").notNull(), // datum level\n  toprl: real(\"toprl\").notNull(), // top level on Y axis\n  left: real(\"left\").notNull(), // start chainage of X axis\n  right: real(\"right\").notNull(), // end chainage of X axis\n  xincr: real(\"xincr\").notNull(), // interval of distances on X axis\n  yincr: real(\"yincr\").notNull(), // interval of levels on Y axis\n  noch: integer(\"noch\").notNull(), // total number of chainages\n});\n\nexport const bridgeCrossSections = pgTable(\"bridge_cross_sections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").references(() => bridgeProjects.id),\n  chainage: real(\"chainage\").notNull(),\n  level: real(\"level\").notNull(),\n  sequence: integer(\"sequence\").notNull(),\n});\n\n// New batch processing tables\nexport const batchJobs = pgTable(\"batch_jobs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  name: text(\"name\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, processing, completed, failed\n  totalFiles: integer(\"total_files\").notNull(),\n  processedFiles: integer(\"processed_files\").notNull().default(0),\n  failedFiles: integer(\"failed_files\").notNull().default(0),\n  createdAt: text(\"created_at\").default(sql`now()`),\n  completedAt: text(\"completed_at\"),\n});\n\nexport const batchJobFiles = pgTable(\"batch_job_files\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  batchJobId: varchar(\"batch_job_id\").references(() => batchJobs.id),\n  projectId: varchar(\"project_id\").references(() => bridgeProjects.id),\n  fileName: text(\"file_name\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, processing, completed, failed\n  progress: integer(\"progress\").notNull().default(0),\n  errorMessage: text(\"error_message\"),\n  currentStep: text(\"current_step\"),\n  estimatedTime: integer(\"estimated_time_seconds\"),\n  startedAt: text(\"started_at\"),\n  completedAt: text(\"completed_at\"),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertBridgeProjectSchema = createInsertSchema(bridgeProjects).pick({\n  name: true,\n  inputData: true,\n  parameters: true,\n});\n\nexport const insertBridgeParametersSchema = createInsertSchema(bridgeParameters).omit({\n  id: true,\n  projectId: true,\n});\n\nexport const insertBridgeCrossSectionSchema = createInsertSchema(bridgeCrossSections).omit({\n  id: true,\n  projectId: true,\n});\n\nexport const insertBatchJobSchema = createInsertSchema(batchJobs).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  completedAt: true,\n});\n\nexport const insertBatchJobFileSchema = createInsertSchema(batchJobFiles).omit({\n  id: true,\n  batchJobId: true,\n  startedAt: true,\n  completedAt: true,\n});\n\n// Input file parsing schema\nexport const bridgeInputSchema = z.object({\n  scale1: z.number().positive(),\n  scale2: z.number().positive(),\n  skew: z.number(),\n  datum: z.number(),\n  toprl: z.number(),\n  left: z.number(),\n  right: z.number(),\n  xincr: z.number().positive(),\n  yincr: z.number().positive(),\n  noch: z.number().int().positive(),\n  crossSections: z.array(z.object({\n    chainage: z.number(),\n    level: z.number()\n  })).optional()\n});\n\nexport const batchUploadSchema = z.object({\n  files: z.array(z.object({\n    name: z.string(),\n    content: z.string(),\n    size: z.number()\n  })).min(1).max(20)\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertBridgeProject = z.infer<typeof insertBridgeProjectSchema>;\nexport type BridgeProject = typeof bridgeProjects.$inferSelect;\nexport type InsertBridgeParameters = z.infer<typeof insertBridgeParametersSchema>;\nexport type BridgeParameters = typeof bridgeParameters.$inferSelect;\nexport type InsertBridgeCrossSection = z.infer<typeof insertBridgeCrossSectionSchema>;\nexport type BridgeCrossSection = typeof bridgeCrossSections.$inferSelect;\nexport type BridgeInput = z.infer<typeof bridgeInputSchema>;\nexport type InsertBatchJob = z.infer<typeof insertBatchJobSchema>;\nexport type BatchJob = typeof batchJobs.$inferSelect;\nexport type InsertBatchJobFile = z.infer<typeof insertBatchJobFileSchema>;\nexport type BatchJobFile = typeof batchJobFiles.$inferSelect;\nexport type BatchUpload = z.infer<typeof batchUploadSchema>;\n","size_bytes":5683},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":699},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"export async function apiRequest(url: string, method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\", data?: any) {\n  const options: RequestInit = {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    credentials: 'include',\n  };\n\n  if (data && method !== \"GET\") {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetch(url, options);\n  \n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`${response.status}: ${errorText || response.statusText}`);\n  }\n\n  return response.json();\n}\n","size_bytes":555},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport FileUpload from \"@/components/batch/file-upload\";\nimport ProcessingQueue from \"@/components/batch/processing-queue\";\nimport ExportOptions from \"@/components/batch/export-options\";\nimport ParameterDisplay from \"@/components/batch/parameter-display\";\n\nexport default function Home() {\n  const [selectedBatchJob, setSelectedBatchJob] = useState<string | null>(null);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header Navigation */}\n      <header className=\"bg-white border-b border-gray-200 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-bridge text-white text-sm\"></i>\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-900\">Bridge GAD Drafter</h1>\n                <p className=\"text-xs text-gray-500\">Batch Processing System</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <button className=\"p-2 text-gray-400 hover:text-gray-600\" data-testid=\"button-settings\">\n                <i className=\"fas fa-cog\"></i>\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Left Column: File Management */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            <FileUpload onBatchJobCreated={setSelectedBatchJob} />\n            <ProcessingQueue selectedJobId={selectedBatchJob} />\n            <ExportOptions />\n          </div>\n\n          {/* Right Column: Parameter Display & Controls */}\n          <div className=\"space-y-6\">\n            <ParameterDisplay />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2084},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/index.ts":{"content":"export interface BatchUpload {\n  files: {\n    name: string;\n    content: string;\n    size: number;\n  }[];\n}\n\nexport interface BatchJob {\n  id: string;\n  userId: string;\n  name: string;\n  status: \"pending\" | \"processing\" | \"completed\" | \"failed\";\n  totalFiles: number;\n  processedFiles: number;\n  failedFiles: number;\n  createdAt: string;\n  completedAt: string | null;\n}\n\nexport interface BatchJobFile {\n  id: string;\n  batchJobId: string;\n  projectId?: string;\n  fileName: string;\n  fileSize: number;\n  status: \"pending\" | \"processing\" | \"completed\" | \"failed\";\n  progress: number;\n  errorMessage?: string;\n  currentStep?: string;\n  estimatedTime?: number;\n  startedAt?: string;\n  completedAt?: string;\n}\n\nexport interface BridgeProject {\n  id: string;\n  name: string;\n  userId: string | null;\n  inputData: string;\n  parameters: string;\n  generatedDrawing: string | null;\n  createdAt: string;\n}\n\nexport interface BridgeParameters {\n  id: string;\n  projectId: string;\n  scale1: number;\n  scale2: number;\n  skew: number;\n  datum: number;\n  toprl: number;\n  left: number;\n  right: number;\n  xincr: number;\n  yincr: number;\n  noch: number;\n}\n\nexport interface BridgeCrossSection {\n  id: string;\n  projectId: string;\n  chainage: number;\n  level: number;\n  sequence: number;\n}\n\nexport interface User {\n  id: string;\n  username: string;\n  password: string;\n}\n","size_bytes":1352},"client/src/components/batch/export-options.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/api\";\n\ninterface ExportConfig {\n  archiveFormat: \"zip\" | \"tar\" | \"individual\";\n  namingConvention: \"original\" | \"sequential\" | \"timestamp\";\n  includeParameters: boolean;\n}\n\nexport default function ExportOptions() {\n  const [exportConfig, setExportConfig] = useState<ExportConfig>({\n    archiveFormat: \"zip\",\n    namingConvention: \"original\",\n    includeParameters: true,\n  });\n  const [selectedFormats, setSelectedFormats] = useState<Set<string>>(new Set([\"dwg\", \"pdf\", \"lisp\"]));\n  \n  const { toast } = useToast();\n\n  const { data: batchJobs = [] } = useQuery({\n    queryKey: [\"/api/bridge/batch-jobs\"],\n  });\n\n  const exportMutation = useMutation({\n    mutationFn: async (jobId: string) => {\n      return apiRequest(`/api/bridge/batch-jobs/${jobId}/export`, \"GET\");\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Export Prepared\",\n        description: `${data.totalFiles} files ready for download`,\n      });\n      // In a real app, this would trigger the actual download\n      window.open(data.downloadUrl, '_blank');\n    },\n    onError: (error) => {\n      toast({\n        title: \"Export Failed\",\n        description: error.message || \"Failed to prepare export\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const completedJobs = batchJobs.filter((job: any) => job.status === \"completed\");\n  const totalCompletedFiles = completedJobs.reduce((sum: number, job: any) => sum + job.processedFiles, 0);\n\n  const handleFormatToggle = (format: string) => {\n    const newFormats = new Set(selectedFormats);\n    if (newFormats.has(format)) {\n      newFormats.delete(format);\n    } else {\n      newFormats.add(format);\n    }\n    setSelectedFormats(newFormats);\n  };\n\n  const handleBatchExport = () => {\n    if (completedJobs.length === 0) {\n      toast({\n        title: \"No Completed Jobs\",\n        description: \"Complete some batch jobs before exporting\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // For demo, export the first completed job\n    exportMutation.mutate(completedJobs[0].id);\n  };\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-download text-green-600\"></i>\n            </div>\n            <div>\n              <h2 className=\"text-lg font-semibold text-gray-900\">Batch Export Options</h2>\n              <p className=\"text-sm text-gray-500\">Download all generated files in bulk</p>\n            </div>\n          </div>\n          <Badge variant=\"secondary\">Step 3</Badge>\n        </div>\n\n        {/* Export Format Selection */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n          <div \n            className={`border rounded-lg p-4 cursor-pointer transition-colors ${\n              selectedFormats.has(\"dwg\") ? \"border-primary bg-primary/5\" : \"border-gray-200 hover:border-primary\"\n            }`}\n            onClick={() => handleFormatToggle(\"dwg\")}\n            data-testid=\"format-dwg\"\n          >\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-file-code text-orange-600 text-lg\"></i>\n              </div>\n              <h4 className=\"font-semibold text-gray-900\">DWG Format</h4>\n              <p className=\"text-sm text-gray-600 mt-1\">AutoCAD Drawing Files</p>\n              <p className=\"text-xs text-gray-500 mt-2\">3 A4 Landscape Pages each</p>\n              <div className=\"mt-3 text-sm\">\n                <span className=\"font-medium text-green-600\">{totalCompletedFiles}</span> files ready\n              </div>\n            </div>\n          </div>\n          \n          <div \n            className={`border rounded-lg p-4 cursor-pointer transition-colors ${\n              selectedFormats.has(\"pdf\") ? \"border-primary bg-primary/5\" : \"border-gray-200 hover:border-primary\"\n            }`}\n            onClick={() => handleFormatToggle(\"pdf\")}\n            data-testid=\"format-pdf\"\n          >\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-file-pdf text-red-600 text-lg\"></i>\n              </div>\n              <h4 className=\"font-semibold text-gray-900\">PDF Format</h4>\n              <p className=\"text-sm text-gray-600 mt-1\">Portable Documents</p>\n              <p className=\"text-xs text-gray-500 mt-2\">Print Ready A4</p>\n              <div className=\"mt-3 text-sm\">\n                <span className=\"font-medium text-green-600\">{totalCompletedFiles}</span> files ready\n              </div>\n            </div>\n          </div>\n          \n          <div \n            className={`border rounded-lg p-4 cursor-pointer transition-colors ${\n              selectedFormats.has(\"lisp\") ? \"border-primary bg-primary/5\" : \"border-gray-200 hover:border-primary\"\n            }`}\n            onClick={() => handleFormatToggle(\"lisp\")}\n            data-testid=\"format-lisp\"\n          >\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-code text-green-600 text-lg\"></i>\n              </div>\n              <h4 className=\"font-semibold text-gray-900\">LISP Code</h4>\n              <p className=\"text-sm text-gray-600 mt-1\">AutoCAD LISP Scripts</p>\n              <p className=\"text-xs text-gray-500 mt-2\">Generated Commands</p>\n              <div className=\"mt-3 text-sm\">\n                <span className=\"font-medium text-green-600\">{totalCompletedFiles}</span> files ready\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Export Configuration */}\n        <div className=\"bg-gray-50 rounded-lg p-4 mb-6\">\n          <h4 className=\"font-medium text-gray-900 mb-3\">Export Configuration</h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Archive Format</label>\n              <Select\n                value={exportConfig.archiveFormat}\n                onValueChange={(value: \"zip\" | \"tar\" | \"individual\") =>\n                  setExportConfig(prev => ({ ...prev, archiveFormat: value }))\n                }\n              >\n                <SelectTrigger data-testid=\"select-archive-format\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"zip\">ZIP Archive</SelectItem>\n                  <SelectItem value=\"tar\">TAR Archive</SelectItem>\n                  <SelectItem value=\"individual\">Individual Files</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Naming Convention</label>\n              <Select\n                value={exportConfig.namingConvention}\n                onValueChange={(value: \"original\" | \"sequential\" | \"timestamp\") =>\n                  setExportConfig(prev => ({ ...prev, namingConvention: value }))\n                }\n              >\n                <SelectTrigger data-testid=\"select-naming-convention\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"original\">Original Filename</SelectItem>\n                  <SelectItem value=\"sequential\">Sequential (bridge_001, 002...)</SelectItem>\n                  <SelectItem value=\"timestamp\">With Timestamp</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <div className=\"mt-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"include-parameters\"\n                checked={exportConfig.includeParameters}\n                onCheckedChange={(checked) =>\n                  setExportConfig(prev => ({ ...prev, includeParameters: !!checked }))\n                }\n                data-testid=\"checkbox-include-parameters\"\n              />\n              <label htmlFor=\"include-parameters\" className=\"text-sm text-gray-700\">\n                Include parameter files (.txt)\n              </label>\n            </div>\n          </div>\n        </div>\n\n        {/* Export Actions */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-gray-600\">\n            Total files: <span className=\"font-medium\" data-testid=\"text-total-files\">\n              {totalCompletedFiles * selectedFormats.size}\n            </span>\n            {totalCompletedFiles > 0 && (\n              <span> ({totalCompletedFiles} projects × {selectedFormats.size} formats)</span>\n            )}\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              variant=\"outline\"\n              data-testid=\"button-preview-export\"\n            >\n              <i className=\"fas fa-eye mr-2\"></i>\n              Preview\n            </Button>\n            <Button\n              className=\"bg-green-600 hover:bg-green-700\"\n              onClick={handleBatchExport}\n              disabled={completedJobs.length === 0 || selectedFormats.size === 0 || exportMutation.isPending}\n              data-testid=\"button-download-all\"\n            >\n              <i className=\"fas fa-download mr-2\"></i>\n              {exportMutation.isPending ? \"Preparing...\" : \"Download All\"}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":10289},"client/src/components/batch/file-upload.tsx":{"content":"import React, { useCallback, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/api\";\nimport type { BatchUpload } from \"@/types\";\n\ninterface UploadedFile {\n  id: string;\n  name: string;\n  size: number;\n  content: string;\n  status: \"pending\" | \"validated\" | \"error\";\n  errorMessage?: string;\n}\n\ninterface FileUploadProps {\n  onBatchJobCreated?: (jobId: string) => void;\n}\n\nexport default function FileUpload({ onBatchJobCreated }: FileUploadProps) {\n  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([]);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const batchUploadMutation = useMutation({\n    mutationFn: async (data: BatchUpload) => {\n      return apiRequest(\"/api/bridge/batch-upload\", \"POST\", data);\n    },\n    onSuccess: (response) => {\n      toast({\n        title: \"Batch Upload Successful\",\n        description: `Successfully uploaded ${response.jobFiles.length} files for processing.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bridge/batch-jobs\"] });\n      if (onBatchJobCreated && response.batchJob) {\n        onBatchJobCreated(response.batchJob.id);\n      }\n      setUploadedFiles([]);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Upload Failed\",\n        description: error.message || \"Failed to upload files\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const validateFile = useCallback((content: string): { valid: boolean; error?: string } => {\n    const lines = content.split('\\n').map(line => line.trim()).filter(line => line.length > 0);\n    \n    if (lines.length < 10) {\n      return { valid: false, error: \"Invalid format: insufficient data\" };\n    }\n\n    try {\n      // Validate that first 10 lines are numeric\n      for (let i = 0; i < 10; i++) {\n        const num = parseFloat(lines[i]);\n        if (isNaN(num)) {\n          return { valid: false, error: `Invalid numeric value at line ${i + 1}` };\n        }\n      }\n      return { valid: true };\n    } catch (error) {\n      return { valid: false, error: \"Failed to parse file content\" };\n    }\n  }, []);\n\n  const onDrop = useCallback(\n    (acceptedFiles: File[]) => {\n      if (acceptedFiles.length + uploadedFiles.length > 20) {\n        toast({\n          title: \"Too Many Files\",\n          description: \"Maximum 20 files allowed per batch\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      acceptedFiles.forEach((file) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n          const content = reader.result as string;\n          const validation = validateFile(content);\n          \n          const uploadedFile: UploadedFile = {\n            id: Math.random().toString(36).substr(2, 9),\n            name: file.name,\n            size: file.size,\n            content,\n            status: validation.valid ? \"validated\" : \"error\",\n            errorMessage: validation.error,\n          };\n\n          setUploadedFiles(prev => [...prev, uploadedFile]);\n        };\n        reader.readAsText(file);\n      });\n    },\n    [uploadedFiles.length, validateFile, toast]\n  );\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'text/plain': ['.txt'],\n    },\n    multiple: true,\n    maxFiles: 20,\n  });\n\n  const removeFile = (id: string) => {\n    setUploadedFiles(prev => prev.filter(f => f.id !== id));\n  };\n\n  const clearAll = () => {\n    setUploadedFiles([]);\n  };\n\n  const handleStartBatchProcessing = () => {\n    const validFiles = uploadedFiles.filter(f => f.status === \"validated\");\n    \n    if (validFiles.length === 0) {\n      toast({\n        title: \"No Valid Files\",\n        description: \"Please upload valid GAD files before processing\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const batchData: BatchUpload = {\n      files: validFiles.map(f => ({\n        name: f.name,\n        content: f.content,\n        size: f.size\n      }))\n    };\n\n    batchUploadMutation.mutate(batchData);\n  };\n\n  const validFiles = uploadedFiles.filter(f => f.status === \"validated\");\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-cloud-upload-alt text-primary\"></i>\n            </div>\n            <div>\n              <h2 className=\"text-lg font-semibold text-gray-900\">Upload GAD Files</h2>\n              <p className=\"text-sm text-gray-500\">Batch processing for multiple bridge designs</p>\n            </div>\n          </div>\n          <Badge variant=\"secondary\">Step 1</Badge>\n        </div>\n\n        {/* Enhanced Drop Zone for Multiple Files */}\n        <div\n          {...getRootProps()}\n          className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${\n            isDragActive ? 'border-primary bg-primary/5' : 'border-gray-300 hover:border-primary'\n          }`}\n          data-testid=\"dropzone-upload\"\n        >\n          <input {...getInputProps()} data-testid=\"input-file\" />\n          <div className=\"space-y-4\">\n            <div className=\"mx-auto w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center\">\n              <i className=\"fas fa-files text-gray-400 text-xl\"></i>\n            </div>\n            <div>\n              <p className=\"text-lg font-medium text-gray-900\">Upload Multiple GAD.txt Files</p>\n              <p className=\"text-sm text-gray-500 mt-1\">\n                Click to browse or drag and drop multiple bridge parameter files\n              </p>\n            </div>\n            <div className=\"flex items-center justify-center space-x-6 text-xs text-gray-400\">\n              <span>Supported: .txt files</span>\n              <span>Max: 10MB each</span>\n              <span>Batch limit: 20 files</span>\n            </div>\n          </div>\n        </div>\n\n        {/* File Queue Display */}\n        {uploadedFiles.length > 0 && (\n          <div className=\"mt-6 space-y-3\" data-testid=\"file-queue\">\n            {uploadedFiles.map((file) => (\n              <div key={file.id} className=\"bg-gray-50 rounded-lg p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${\n                      file.status === \"validated\" ? \"bg-blue-100\" : \n                      file.status === \"error\" ? \"bg-orange-100\" : \"bg-gray-100\"\n                    }`}>\n                      <i className={`text-sm ${\n                        file.status === \"validated\" ? \"fas fa-file-alt text-blue-600\" : \n                        file.status === \"error\" ? \"fas fa-file-alt text-orange-600\" : \"fas fa-file-alt text-gray-600\"\n                      }`}></i>\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-gray-900\">{file.name}</p>\n                      <p className=\"text-sm text-gray-500\">\n                        {(file.size / 1024).toFixed(1)} KB • {\n                          file.status === \"validated\" ? \"Ready for processing\" :\n                          file.status === \"error\" ? file.errorMessage : \"Processing...\"\n                        }\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge\n                      variant={file.status === \"validated\" ? \"default\" : \"destructive\"}\n                      className={\n                        file.status === \"validated\" ? \"bg-green-100 text-green-800\" : \"\"\n                      }\n                    >\n                      {file.status === \"validated\" && <i className=\"fas fa-check-circle mr-1\"></i>}\n                      {file.status === \"error\" && <i className=\"fas fa-exclamation-triangle mr-1\"></i>}\n                      {file.status === \"validated\" ? \"Validated\" : \n                       file.status === \"error\" ? \"Invalid Format\" : \"Processing\"}\n                    </Badge>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeFile(file.id)}\n                      data-testid={`button-remove-file-${file.id}`}\n                    >\n                      <i className=\"fas fa-times\"></i>\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Batch Action Buttons */}\n        {uploadedFiles.length > 0 && (\n          <div className=\"mt-6 flex items-center justify-between\">\n            <div className=\"text-sm text-gray-600\">\n              <span className=\"font-medium\">{validFiles.length}</span> of{\" \"}\n              <span>{uploadedFiles.length}</span> files ready\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button\n                variant=\"outline\"\n                onClick={clearAll}\n                data-testid=\"button-clear-all\"\n              >\n                Clear All\n              </Button>\n              <Button\n                onClick={handleStartBatchProcessing}\n                disabled={validFiles.length === 0 || batchUploadMutation.isPending}\n                data-testid=\"button-start-batch-processing\"\n              >\n                <i className=\"fas fa-play mr-2\"></i>\n                {batchUploadMutation.isPending ? \"Processing...\" : \"Start Batch Processing\"}\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":10067},"client/src/components/batch/parameter-display.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface BridgeParameters {\n  scale1: string;\n  scale2: string;\n  skew: string;\n  datum: string;\n  toprl: string;\n  chainageRange: string;\n  xincr: string;\n  yincr: string;\n  noch: string;\n}\n\ninterface CalculatedConstants {\n  vvs: string;\n  hhs: string;\n  skew1: string;\n  sc: string;\n}\n\nexport default function ParameterDisplay() {\n  // Sample parameters - in a real app, these would come from the selected project\n  const [parameters] = useState<BridgeParameters>({\n    scale1: \"1:100\",\n    scale2: \"1:50\", \n    skew: \"15.0°\",\n    datum: \"120.500m\",\n    toprl: \"125.750m\",\n    chainageRange: \"2+150 to 2+200\",\n    xincr: \"5.0m\",\n    yincr: \"1.0m\",\n    noch: \"11\"\n  });\n\n  const [constants] = useState<CalculatedConstants>({\n    vvs: \"1000.0\",\n    hhs: \"1000.0\", \n    skew1: \"0.2618\",\n    sc: \"2.00\"\n  });\n\n  const handleEditParameters = () => {\n    // In a real app, this would open an edit dialog\n    console.log(\"Edit parameters clicked\");\n  };\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n            <i className=\"fas fa-calculator text-primary mr-2\"></i>\n            Current Project Parameters\n          </h3>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleEditParameters}\n            data-testid=\"button-edit-parameters\"\n          >\n            <i className=\"fas fa-edit mr-1\"></i>Edit\n          </Button>\n        </div>\n        \n        <div className=\"space-y-3 text-sm\">\n          <div className=\"flex justify-between py-2 border-b border-gray-100\">\n            <span className=\"font-medium\">Scale 1 (Plan/Elevation):</span>\n            <span className=\"font-mono text-gray-700\" data-testid=\"param-scale1\">{parameters.scale1}</span>\n          </div>\n          <div className=\"flex justify-between py-2 border-b border-gray-100\">\n            <span className=\"font-medium\">Scale 2 (Sections):</span>\n            <span className=\"font-mono text-gray-700\" data-testid=\"param-scale2\">{parameters.scale2}</span>\n          </div>\n          <div className=\"flex justify-between py-2 border-b border-gray-100\">\n            <span className=\"font-medium\">Skew Angle:</span>\n            <span className=\"font-mono text-gray-700\" data-testid=\"param-skew\">{parameters.skew}</span>\n          </div>\n          <div className=\"flex justify-between py-2 border-b border-gray-100\">\n            <span className=\"font-medium\">Datum Level:</span>\n            <span className=\"font-mono text-gray-700\" data-testid=\"param-datum\">{parameters.datum}</span>\n          </div>\n          <div className=\"flex justify-between py-2 border-b border-gray-100\">\n            <span className=\"font-medium\">Top RL:</span>\n            <span className=\"font-mono text-gray-700\" data-testid=\"param-toprl\">{parameters.toprl}</span>\n          </div>\n          <div className=\"flex justify-between py-2 border-b border-gray-100\">\n            <span className=\"font-medium\">Chainage Range:</span>\n            <span className=\"font-mono text-gray-700\" data-testid=\"param-chainage-range\">{parameters.chainageRange}</span>\n          </div>\n          <div className=\"flex justify-between py-2 border-b border-gray-100\">\n            <span className=\"font-medium\">X Increment:</span>\n            <span className=\"font-mono text-gray-700\" data-testid=\"param-xincr\">{parameters.xincr}</span>\n          </div>\n          <div className=\"flex justify-between py-2 border-b border-gray-100\">\n            <span className=\"font-medium\">Y Increment:</span>\n            <span className=\"font-mono text-gray-700\" data-testid=\"param-yincr\">{parameters.yincr}</span>\n          </div>\n          <div className=\"flex justify-between py-2\">\n            <span className=\"font-medium\">No. of Chainages:</span>\n            <span className=\"font-mono text-gray-700\" data-testid=\"param-noch\">{parameters.noch}</span>\n          </div>\n        </div>\n\n        {/* Calculated Constants (Educational) */}\n        <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n          <h4 className=\"text-sm font-medium text-blue-900 mb-3\">Calculated Constants (Educational)</h4>\n          <div className=\"space-y-2 text-xs\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-blue-700\">vvs (V scale factor):</span>\n              <span className=\"font-mono text-blue-900\" data-testid=\"constant-vvs\">{constants.vvs}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-blue-700\">hhs (H scale factor):</span>\n              <span className=\"font-mono text-blue-900\" data-testid=\"constant-hhs\">{constants.hhs}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-blue-700\">skew1 (radians):</span>\n              <span className=\"font-mono text-blue-900\" data-testid=\"constant-skew1\">{constants.skew1}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-blue-700\">sc (scale ratio):</span>\n              <span className=\"font-mono text-blue-900\" data-testid=\"constant-sc\">{constants.sc}</span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5468},"client/src/components/batch/processing-queue.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/api\";\nimport type { BatchJob, BatchJobFile } from \"@/types\";\n\ninterface ProcessingQueueProps {\n  selectedJobId?: string | null;\n}\n\nexport default function ProcessingQueue({ selectedJobId }: ProcessingQueueProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: batchJobs = [], isLoading } = useQuery({\n    queryKey: [\"/api/bridge/batch-jobs\"],\n    refetchInterval: 2000, // Poll every 2 seconds for updates\n  });\n\n  const { data: selectedJobData } = useQuery({\n    queryKey: [\"/api/bridge/batch-jobs\", selectedJobId],\n    enabled: !!selectedJobId,\n    refetchInterval: 1000, // More frequent updates for selected job\n  });\n\n  const processMutation = useMutation({\n    mutationFn: async (jobId: string) => {\n      return apiRequest(`/api/bridge/batch-jobs/${jobId}/process`, \"POST\");\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Processing Started\",\n        description: \"Batch processing has been initiated\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bridge/batch-jobs\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Processing Failed\",\n        description: error.message || \"Failed to start processing\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\": return \"bg-blue-50 text-blue-600\";\n      case \"processing\": return \"bg-orange-50 text-orange-600\";\n      case \"completed\": return \"bg-green-50 text-green-600\";\n      case \"failed\": return \"bg-red-50 text-red-600\";\n      default: return \"bg-gray-50 text-gray-600\";\n    }\n  };\n\n  const getQueueStats = () => {\n    const stats = { pending: 0, processing: 0, completed: 0, failed: 0 };\n    \n    batchJobs.forEach((job: BatchJob) => {\n      if (job.status in stats) {\n        stats[job.status as keyof typeof stats]++;\n      }\n    });\n\n    return stats;\n  };\n\n  const queueStats = getQueueStats();\n  const processingFiles = selectedJobData?.files?.filter(\n    (file: BatchJobFile) => file.status === \"processing\" || file.status === \"completed\"\n  ) || [];\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-6 bg-gray-200 rounded w-1/2\"></div>\n            <div className=\"space-y-3\">\n              <div className=\"h-16 bg-gray-200 rounded\"></div>\n              <div className=\"h-16 bg-gray-200 rounded\"></div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-tasks text-orange-600\"></i>\n            </div>\n            <div>\n              <h2 className=\"text-lg font-semibold text-gray-900\">Batch Processing Queue</h2>\n              <p className=\"text-sm text-gray-500\">Monitor and manage multiple bridge generations</p>\n            </div>\n          </div>\n          <Badge variant=\"secondary\">Step 2</Badge>\n        </div>\n\n        {/* Queue Status Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <div className=\"bg-blue-50 rounded-lg p-4 text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"stat-pending\">\n              {queueStats.pending}\n            </div>\n            <div className=\"text-sm text-blue-600\">Pending</div>\n          </div>\n          <div className=\"bg-orange-50 rounded-lg p-4 text-center\">\n            <div className=\"text-2xl font-bold text-orange-600\" data-testid=\"stat-processing\">\n              {queueStats.processing}\n            </div>\n            <div className=\"text-sm text-orange-600\">Processing</div>\n          </div>\n          <div className=\"bg-green-50 rounded-lg p-4 text-center\">\n            <div className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-completed\">\n              {queueStats.completed}\n            </div>\n            <div className=\"text-sm text-green-600\">Completed</div>\n          </div>\n          <div className=\"bg-red-50 rounded-lg p-4 text-center\">\n            <div className=\"text-2xl font-bold text-red-600\" data-testid=\"stat-failed\">\n              {queueStats.failed}\n            </div>\n            <div className=\"text-sm text-red-600\">Failed</div>\n          </div>\n        </div>\n\n        {/* Individual Job Progress */}\n        <div className=\"space-y-3\" data-testid=\"processing-jobs\">\n          {processingFiles.map((file: BatchJobFile) => (\n            <div key={file.id} className=\"border border-gray-200 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${getStatusColor(file.status)}`}>\n                    {file.status === \"processing\" ? (\n                      <i className=\"fas fa-cog fa-spin text-sm\"></i>\n                    ) : file.status === \"completed\" ? (\n                      <i className=\"fas fa-check text-sm\"></i>\n                    ) : (\n                      <i className=\"fas fa-clock text-sm\"></i>\n                    )}\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-gray-900\">{file.fileName}</p>\n                    <p className=\"text-sm text-gray-500\">{file.currentStep || \"Queued\"}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm text-gray-600\">{file.progress}%</span>\n                  <Badge\n                    className={\n                      file.status === \"processing\" ? \"bg-orange-100 text-orange-800\" :\n                      file.status === \"completed\" ? \"bg-green-100 text-green-800\" :\n                      \"bg-blue-100 text-blue-800\"\n                    }\n                  >\n                    {file.status === \"processing\" ? \"Processing\" :\n                     file.status === \"completed\" ? \"Completed\" : \"Pending\"}\n                  </Badge>\n                </div>\n              </div>\n              \n              <Progress value={file.progress} className=\"mb-2\" />\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-xs text-gray-500\">\n                  {file.status === \"completed\" && file.completedAt ? (\n                    `Completed ${new Date(file.completedAt).toLocaleTimeString()}`\n                  ) : file.estimatedTime ? (\n                    `Estimated completion: ${Math.round(file.estimatedTime / 60)} minutes`\n                  ) : (\n                    \"Processing...\"\n                  )}\n                </div>\n                {file.status === \"completed\" && (\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      data-testid={`button-view-${file.id}`}\n                    >\n                      <i className=\"fas fa-eye mr-1\"></i>View\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      data-testid={`button-download-${file.id}`}\n                    >\n                      <i className=\"fas fa-download mr-1\"></i>Download\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n\n          {processingFiles.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              <i className=\"fas fa-clipboard-list text-3xl mb-4\"></i>\n              <p>No jobs in processing queue</p>\n              <p className=\"text-sm\">Upload files to start batch processing</p>\n            </div>\n          )}\n        </div>\n\n        {/* Queue Controls */}\n        {batchJobs.length > 0 && (\n          <div className=\"mt-6 flex items-center justify-between\">\n            <div className=\"text-sm text-gray-600\">\n              Queue processing: <span className=\"font-medium text-green-600\">Active</span>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"button-pause-queue\"\n              >\n                <i className=\"fas fa-pause mr-2\"></i>\n                Pause Queue\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"button-clear-completed\"\n              >\n                <i className=\"fas fa-trash mr-2\"></i>\n                Clear Completed\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9400},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}